#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module CZ
  module Epm
    module Thrift
      module ProductState
        INSPECT = 100
        REWORK = 200
        PACK = 300
        VALUE_MAP = {100 => "INSPECT", 200 => "REWORK", 300 => "PACK"}
        VALID_VALUES = Set.new([INSPECT, REWORK, PACK]).freeze
      end

      module ProductInspectType
        FAIL = 0
        PASS = 1
        VALUE_MAP = {0 => "FAIL", 1 => "PASS"}
        VALID_VALUES = Set.new([FAIL, PASS]).freeze
      end

      module ProductInspectHandledType
        FIRSTPASS = 100
        PASS = 200
        FAIL = 300
        VALUE_MAP = {100 => "FIRSTPASS", 200 => "PASS", 300 => "FAIL"}
        VALID_VALUES = Set.new([FIRSTPASS, PASS, FAIL]).freeze
      end

      class IOError < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union
        def initialize(message=nil)
          super()
          self.message = message
        end

        MESSAGE = 1

        FIELDS = {
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IllegalArgument < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union
        def initialize(message=nil)
          super()
          self.message = message
        end

        MESSAGE = 1

        FIELDS = {
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
