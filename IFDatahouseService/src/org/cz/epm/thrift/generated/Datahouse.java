/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.cz.epm.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Datahouse {

  public interface Iface {

    /**
     * add attendance
     * entityId,attendTime,staffId,type are required
     * type: -1:off,1:on
     * 
     * @param accessKey
     * @param dataMap
     */
    public void addAttendance(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    /**
     * add product inspect
     * entityId,inspectTime,productNr,type are required
     * type 0:fail,1:pass
     * 
     * @param accessKey
     * @param dataMap
     */
    public void addProductInspect(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    /**
     * add out put
     * entityId,packTime,productNr,partId are required
     * 
     * @param accessKey
     * @param dataMap
     */
    public void addProductPack(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    /**
     * set product inspect
     * entityId,inspectTime,productNr,type are required
     * type 0:fail,1:pass
     * 
     * @param accessKey
     * @param dataMap
     */
    public void setProductInspectState(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    /**
     * add entity operation record
     * entityId,operateTime,state are required
     * 
     * @param accessKey
     * @param dataMap
     */
    public void addOperatingState(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    /**
     * add target
     * entityId,partId are required
     * 
     * @param accessKey
     * @param dataMap
     */
    public void addPlanTarget(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    public Map<String,String> getPlanTarget(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException;

    /**
     * get current on job workers number
     * 
     * @param accessKey
     * @param entityIds
     */
    public Map<String,Long> getCurrentOnJobWorkerNums(String accessKey, Set<String> entityIds) throws org.apache.thrift.TException;

    /**
     * get out put number
     * date in format of 20130101
     * 
     * @param accessKey
     * @param entityIds
     * @param startTime
     * @param endTime
     */
    public Map<String,Long> getOriProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException;

    /**
     * get product inspect first time right number
     * 
     * @param accessKey
     * @param entityIds
     * @param startTime
     * @param endTime
     */
    public Map<String,Long> getFTRProductNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException;

    /**
     * get product inspect faild number
     * 
     * @param accessKey
     * @param entityIds
     * @param startTime
     * @param endTime
     */
    public Map<String,Long> getFailProductInspectNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException;

    /**
     * get product number
     * 
     * @param accessKey
     * @param entityIds
     * @param startTime
     * @param endTime
     */
    public Map<String,Long> getProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException;

    /**
     * get product number by partId,entityId
     * 
     * @param accessKey
     * @param entityId
     * @param partId
     * @param startTime
     * @param endTime
     */
    public long getProductOutputNumsByPartId(String accessKey, String entityId, String partId, String startTime, String endTime) throws org.apache.thrift.TException;

    /**
     * get entity workers on job time
     * 
     * @param accessKey
     * @param entityIds
     * @param startTime
     * @param endTime
     */
    public Map<String,Long> getOnJobTotalTimes(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException;

    /**
     * get entity part num and produce-time
     * 
     * @param accessKey
     * @param entityId
     * @param startTime
     * @param endTime
     */
    public Set<Map<String,String>> getProductOutputNumAndTime(String accessKey, String entityId, long startTime, long endTime) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addAttendance(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAttendance_call> resultHandler) throws org.apache.thrift.TException;

    public void addProductInspect(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addProductInspect_call> resultHandler) throws org.apache.thrift.TException;

    public void addProductPack(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addProductPack_call> resultHandler) throws org.apache.thrift.TException;

    public void setProductInspectState(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setProductInspectState_call> resultHandler) throws org.apache.thrift.TException;

    public void addOperatingState(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addOperatingState_call> resultHandler) throws org.apache.thrift.TException;

    public void addPlanTarget(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPlanTarget_call> resultHandler) throws org.apache.thrift.TException;

    public void getPlanTarget(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPlanTarget_call> resultHandler) throws org.apache.thrift.TException;

    public void getCurrentOnJobWorkerNums(String accessKey, Set<String> entityIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCurrentOnJobWorkerNums_call> resultHandler) throws org.apache.thrift.TException;

    public void getOriProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOriProductOutputNums_call> resultHandler) throws org.apache.thrift.TException;

    public void getFTRProductNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFTRProductNums_call> resultHandler) throws org.apache.thrift.TException;

    public void getFailProductInspectNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFailProductInspectNums_call> resultHandler) throws org.apache.thrift.TException;

    public void getProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProductOutputNums_call> resultHandler) throws org.apache.thrift.TException;

    public void getProductOutputNumsByPartId(String accessKey, String entityId, String partId, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProductOutputNumsByPartId_call> resultHandler) throws org.apache.thrift.TException;

    public void getOnJobTotalTimes(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOnJobTotalTimes_call> resultHandler) throws org.apache.thrift.TException;

    public void getProductOutputNumAndTime(String accessKey, String entityId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProductOutputNumAndTime_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addAttendance(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_addAttendance(accessKey, dataMap);
      recv_addAttendance();
    }

    public void send_addAttendance(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      addAttendance_args args = new addAttendance_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("addAttendance", args);
    }

    public void recv_addAttendance() throws org.apache.thrift.TException
    {
      addAttendance_result result = new addAttendance_result();
      receiveBase(result, "addAttendance");
      return;
    }

    public void addProductInspect(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_addProductInspect(accessKey, dataMap);
      recv_addProductInspect();
    }

    public void send_addProductInspect(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      addProductInspect_args args = new addProductInspect_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("addProductInspect", args);
    }

    public void recv_addProductInspect() throws org.apache.thrift.TException
    {
      addProductInspect_result result = new addProductInspect_result();
      receiveBase(result, "addProductInspect");
      return;
    }

    public void addProductPack(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_addProductPack(accessKey, dataMap);
      recv_addProductPack();
    }

    public void send_addProductPack(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      addProductPack_args args = new addProductPack_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("addProductPack", args);
    }

    public void recv_addProductPack() throws org.apache.thrift.TException
    {
      addProductPack_result result = new addProductPack_result();
      receiveBase(result, "addProductPack");
      return;
    }

    public void setProductInspectState(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_setProductInspectState(accessKey, dataMap);
      recv_setProductInspectState();
    }

    public void send_setProductInspectState(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      setProductInspectState_args args = new setProductInspectState_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("setProductInspectState", args);
    }

    public void recv_setProductInspectState() throws org.apache.thrift.TException
    {
      setProductInspectState_result result = new setProductInspectState_result();
      receiveBase(result, "setProductInspectState");
      return;
    }

    public void addOperatingState(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_addOperatingState(accessKey, dataMap);
      recv_addOperatingState();
    }

    public void send_addOperatingState(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      addOperatingState_args args = new addOperatingState_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("addOperatingState", args);
    }

    public void recv_addOperatingState() throws org.apache.thrift.TException
    {
      addOperatingState_result result = new addOperatingState_result();
      receiveBase(result, "addOperatingState");
      return;
    }

    public void addPlanTarget(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_addPlanTarget(accessKey, dataMap);
      recv_addPlanTarget();
    }

    public void send_addPlanTarget(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      addPlanTarget_args args = new addPlanTarget_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("addPlanTarget", args);
    }

    public void recv_addPlanTarget() throws org.apache.thrift.TException
    {
      addPlanTarget_result result = new addPlanTarget_result();
      receiveBase(result, "addPlanTarget");
      return;
    }

    public Map<String,String> getPlanTarget(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      send_getPlanTarget(accessKey, dataMap);
      return recv_getPlanTarget();
    }

    public void send_getPlanTarget(String accessKey, Map<String,String> dataMap) throws org.apache.thrift.TException
    {
      getPlanTarget_args args = new getPlanTarget_args();
      args.setAccessKey(accessKey);
      args.setDataMap(dataMap);
      sendBase("getPlanTarget", args);
    }

    public Map<String,String> recv_getPlanTarget() throws org.apache.thrift.TException
    {
      getPlanTarget_result result = new getPlanTarget_result();
      receiveBase(result, "getPlanTarget");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlanTarget failed: unknown result");
    }

    public Map<String,Long> getCurrentOnJobWorkerNums(String accessKey, Set<String> entityIds) throws org.apache.thrift.TException
    {
      send_getCurrentOnJobWorkerNums(accessKey, entityIds);
      return recv_getCurrentOnJobWorkerNums();
    }

    public void send_getCurrentOnJobWorkerNums(String accessKey, Set<String> entityIds) throws org.apache.thrift.TException
    {
      getCurrentOnJobWorkerNums_args args = new getCurrentOnJobWorkerNums_args();
      args.setAccessKey(accessKey);
      args.setEntityIds(entityIds);
      sendBase("getCurrentOnJobWorkerNums", args);
    }

    public Map<String,Long> recv_getCurrentOnJobWorkerNums() throws org.apache.thrift.TException
    {
      getCurrentOnJobWorkerNums_result result = new getCurrentOnJobWorkerNums_result();
      receiveBase(result, "getCurrentOnJobWorkerNums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentOnJobWorkerNums failed: unknown result");
    }

    public Map<String,Long> getOriProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getOriProductOutputNums(accessKey, entityIds, startTime, endTime);
      return recv_getOriProductOutputNums();
    }

    public void send_getOriProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      getOriProductOutputNums_args args = new getOriProductOutputNums_args();
      args.setAccessKey(accessKey);
      args.setEntityIds(entityIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getOriProductOutputNums", args);
    }

    public Map<String,Long> recv_getOriProductOutputNums() throws org.apache.thrift.TException
    {
      getOriProductOutputNums_result result = new getOriProductOutputNums_result();
      receiveBase(result, "getOriProductOutputNums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOriProductOutputNums failed: unknown result");
    }

    public Map<String,Long> getFTRProductNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getFTRProductNums(accessKey, entityIds, startTime, endTime);
      return recv_getFTRProductNums();
    }

    public void send_getFTRProductNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      getFTRProductNums_args args = new getFTRProductNums_args();
      args.setAccessKey(accessKey);
      args.setEntityIds(entityIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getFTRProductNums", args);
    }

    public Map<String,Long> recv_getFTRProductNums() throws org.apache.thrift.TException
    {
      getFTRProductNums_result result = new getFTRProductNums_result();
      receiveBase(result, "getFTRProductNums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFTRProductNums failed: unknown result");
    }

    public Map<String,Long> getFailProductInspectNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getFailProductInspectNums(accessKey, entityIds, startTime, endTime);
      return recv_getFailProductInspectNums();
    }

    public void send_getFailProductInspectNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      getFailProductInspectNums_args args = new getFailProductInspectNums_args();
      args.setAccessKey(accessKey);
      args.setEntityIds(entityIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getFailProductInspectNums", args);
    }

    public Map<String,Long> recv_getFailProductInspectNums() throws org.apache.thrift.TException
    {
      getFailProductInspectNums_result result = new getFailProductInspectNums_result();
      receiveBase(result, "getFailProductInspectNums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFailProductInspectNums failed: unknown result");
    }

    public Map<String,Long> getProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getProductOutputNums(accessKey, entityIds, startTime, endTime);
      return recv_getProductOutputNums();
    }

    public void send_getProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      getProductOutputNums_args args = new getProductOutputNums_args();
      args.setAccessKey(accessKey);
      args.setEntityIds(entityIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getProductOutputNums", args);
    }

    public Map<String,Long> recv_getProductOutputNums() throws org.apache.thrift.TException
    {
      getProductOutputNums_result result = new getProductOutputNums_result();
      receiveBase(result, "getProductOutputNums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductOutputNums failed: unknown result");
    }

    public long getProductOutputNumsByPartId(String accessKey, String entityId, String partId, String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_getProductOutputNumsByPartId(accessKey, entityId, partId, startTime, endTime);
      return recv_getProductOutputNumsByPartId();
    }

    public void send_getProductOutputNumsByPartId(String accessKey, String entityId, String partId, String startTime, String endTime) throws org.apache.thrift.TException
    {
      getProductOutputNumsByPartId_args args = new getProductOutputNumsByPartId_args();
      args.setAccessKey(accessKey);
      args.setEntityId(entityId);
      args.setPartId(partId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getProductOutputNumsByPartId", args);
    }

    public long recv_getProductOutputNumsByPartId() throws org.apache.thrift.TException
    {
      getProductOutputNumsByPartId_result result = new getProductOutputNumsByPartId_result();
      receiveBase(result, "getProductOutputNumsByPartId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductOutputNumsByPartId failed: unknown result");
    }

    public Map<String,Long> getOnJobTotalTimes(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getOnJobTotalTimes(accessKey, entityIds, startTime, endTime);
      return recv_getOnJobTotalTimes();
    }

    public void send_getOnJobTotalTimes(String accessKey, Set<String> entityIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      getOnJobTotalTimes_args args = new getOnJobTotalTimes_args();
      args.setAccessKey(accessKey);
      args.setEntityIds(entityIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getOnJobTotalTimes", args);
    }

    public Map<String,Long> recv_getOnJobTotalTimes() throws org.apache.thrift.TException
    {
      getOnJobTotalTimes_result result = new getOnJobTotalTimes_result();
      receiveBase(result, "getOnJobTotalTimes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOnJobTotalTimes failed: unknown result");
    }

    public Set<Map<String,String>> getProductOutputNumAndTime(String accessKey, String entityId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getProductOutputNumAndTime(accessKey, entityId, startTime, endTime);
      return recv_getProductOutputNumAndTime();
    }

    public void send_getProductOutputNumAndTime(String accessKey, String entityId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      getProductOutputNumAndTime_args args = new getProductOutputNumAndTime_args();
      args.setAccessKey(accessKey);
      args.setEntityId(entityId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getProductOutputNumAndTime", args);
    }

    public Set<Map<String,String>> recv_getProductOutputNumAndTime() throws org.apache.thrift.TException
    {
      getProductOutputNumAndTime_result result = new getProductOutputNumAndTime_result();
      receiveBase(result, "getProductOutputNumAndTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductOutputNumAndTime failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addAttendance(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addAttendance_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAttendance_call method_call = new addAttendance_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAttendance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public addAttendance_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addAttendance_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAttendance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAttendance_args args = new addAttendance_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addAttendance();
      }
    }

    public void addProductInspect(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addProductInspect_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductInspect_call method_call = new addProductInspect_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductInspect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public addProductInspect_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addProductInspect_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductInspect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductInspect_args args = new addProductInspect_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addProductInspect();
      }
    }

    public void addProductPack(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addProductPack_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductPack_call method_call = new addProductPack_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductPack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public addProductPack_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addProductPack_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductPack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductPack_args args = new addProductPack_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addProductPack();
      }
    }

    public void setProductInspectState(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<setProductInspectState_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setProductInspectState_call method_call = new setProductInspectState_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setProductInspectState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public setProductInspectState_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<setProductInspectState_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setProductInspectState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setProductInspectState_args args = new setProductInspectState_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setProductInspectState();
      }
    }

    public void addOperatingState(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addOperatingState_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOperatingState_call method_call = new addOperatingState_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOperatingState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public addOperatingState_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addOperatingState_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOperatingState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOperatingState_args args = new addOperatingState_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addOperatingState();
      }
    }

    public void addPlanTarget(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addPlanTarget_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPlanTarget_call method_call = new addPlanTarget_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPlanTarget_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public addPlanTarget_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<addPlanTarget_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPlanTarget", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPlanTarget_args args = new addPlanTarget_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addPlanTarget();
      }
    }

    public void getPlanTarget(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<getPlanTarget_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlanTarget_call method_call = new getPlanTarget_call(accessKey, dataMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlanTarget_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Map<String,String> dataMap;
      public getPlanTarget_call(String accessKey, Map<String,String> dataMap, org.apache.thrift.async.AsyncMethodCallback<getPlanTarget_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.dataMap = dataMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlanTarget", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlanTarget_args args = new getPlanTarget_args();
        args.setAccessKey(accessKey);
        args.setDataMap(dataMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlanTarget();
      }
    }

    public void getCurrentOnJobWorkerNums(String accessKey, Set<String> entityIds, org.apache.thrift.async.AsyncMethodCallback<getCurrentOnJobWorkerNums_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentOnJobWorkerNums_call method_call = new getCurrentOnJobWorkerNums_call(accessKey, entityIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentOnJobWorkerNums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Set<String> entityIds;
      public getCurrentOnJobWorkerNums_call(String accessKey, Set<String> entityIds, org.apache.thrift.async.AsyncMethodCallback<getCurrentOnJobWorkerNums_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityIds = entityIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentOnJobWorkerNums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentOnJobWorkerNums_args args = new getCurrentOnJobWorkerNums_args();
        args.setAccessKey(accessKey);
        args.setEntityIds(entityIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentOnJobWorkerNums();
      }
    }

    public void getOriProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getOriProductOutputNums_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOriProductOutputNums_call method_call = new getOriProductOutputNums_call(accessKey, entityIds, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOriProductOutputNums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Set<String> entityIds;
      private long startTime;
      private long endTime;
      public getOriProductOutputNums_call(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getOriProductOutputNums_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityIds = entityIds;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOriProductOutputNums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOriProductOutputNums_args args = new getOriProductOutputNums_args();
        args.setAccessKey(accessKey);
        args.setEntityIds(entityIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOriProductOutputNums();
      }
    }

    public void getFTRProductNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFTRProductNums_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFTRProductNums_call method_call = new getFTRProductNums_call(accessKey, entityIds, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFTRProductNums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Set<String> entityIds;
      private long startTime;
      private long endTime;
      public getFTRProductNums_call(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFTRProductNums_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityIds = entityIds;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFTRProductNums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFTRProductNums_args args = new getFTRProductNums_args();
        args.setAccessKey(accessKey);
        args.setEntityIds(entityIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFTRProductNums();
      }
    }

    public void getFailProductInspectNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFailProductInspectNums_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFailProductInspectNums_call method_call = new getFailProductInspectNums_call(accessKey, entityIds, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFailProductInspectNums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Set<String> entityIds;
      private long startTime;
      private long endTime;
      public getFailProductInspectNums_call(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFailProductInspectNums_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityIds = entityIds;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFailProductInspectNums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFailProductInspectNums_args args = new getFailProductInspectNums_args();
        args.setAccessKey(accessKey);
        args.setEntityIds(entityIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFailProductInspectNums();
      }
    }

    public void getProductOutputNums(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getProductOutputNums_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductOutputNums_call method_call = new getProductOutputNums_call(accessKey, entityIds, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductOutputNums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Set<String> entityIds;
      private long startTime;
      private long endTime;
      public getProductOutputNums_call(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getProductOutputNums_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityIds = entityIds;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductOutputNums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductOutputNums_args args = new getProductOutputNums_args();
        args.setAccessKey(accessKey);
        args.setEntityIds(entityIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductOutputNums();
      }
    }

    public void getProductOutputNumsByPartId(String accessKey, String entityId, String partId, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getProductOutputNumsByPartId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductOutputNumsByPartId_call method_call = new getProductOutputNumsByPartId_call(accessKey, entityId, partId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductOutputNumsByPartId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String entityId;
      private String partId;
      private String startTime;
      private String endTime;
      public getProductOutputNumsByPartId_call(String accessKey, String entityId, String partId, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getProductOutputNumsByPartId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityId = entityId;
        this.partId = partId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductOutputNumsByPartId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductOutputNumsByPartId_args args = new getProductOutputNumsByPartId_args();
        args.setAccessKey(accessKey);
        args.setEntityId(entityId);
        args.setPartId(partId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductOutputNumsByPartId();
      }
    }

    public void getOnJobTotalTimes(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getOnJobTotalTimes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOnJobTotalTimes_call method_call = new getOnJobTotalTimes_call(accessKey, entityIds, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOnJobTotalTimes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private Set<String> entityIds;
      private long startTime;
      private long endTime;
      public getOnJobTotalTimes_call(String accessKey, Set<String> entityIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getOnJobTotalTimes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityIds = entityIds;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOnJobTotalTimes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOnJobTotalTimes_args args = new getOnJobTotalTimes_args();
        args.setAccessKey(accessKey);
        args.setEntityIds(entityIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnJobTotalTimes();
      }
    }

    public void getProductOutputNumAndTime(String accessKey, String entityId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getProductOutputNumAndTime_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductOutputNumAndTime_call method_call = new getProductOutputNumAndTime_call(accessKey, entityId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductOutputNumAndTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String entityId;
      private long startTime;
      private long endTime;
      public getProductOutputNumAndTime_call(String accessKey, String entityId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getProductOutputNumAndTime_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.entityId = entityId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductOutputNumAndTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductOutputNumAndTime_args args = new getProductOutputNumAndTime_args();
        args.setAccessKey(accessKey);
        args.setEntityId(entityId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductOutputNumAndTime();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addAttendance", new addAttendance());
      processMap.put("addProductInspect", new addProductInspect());
      processMap.put("addProductPack", new addProductPack());
      processMap.put("setProductInspectState", new setProductInspectState());
      processMap.put("addOperatingState", new addOperatingState());
      processMap.put("addPlanTarget", new addPlanTarget());
      processMap.put("getPlanTarget", new getPlanTarget());
      processMap.put("getCurrentOnJobWorkerNums", new getCurrentOnJobWorkerNums());
      processMap.put("getOriProductOutputNums", new getOriProductOutputNums());
      processMap.put("getFTRProductNums", new getFTRProductNums());
      processMap.put("getFailProductInspectNums", new getFailProductInspectNums());
      processMap.put("getProductOutputNums", new getProductOutputNums());
      processMap.put("getProductOutputNumsByPartId", new getProductOutputNumsByPartId());
      processMap.put("getOnJobTotalTimes", new getOnJobTotalTimes());
      processMap.put("getProductOutputNumAndTime", new getProductOutputNumAndTime());
      return processMap;
    }

    public static class addAttendance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAttendance_args> {
      public addAttendance() {
        super("addAttendance");
      }

      public addAttendance_args getEmptyArgsInstance() {
        return new addAttendance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAttendance_result getResult(I iface, addAttendance_args args) throws org.apache.thrift.TException {
        addAttendance_result result = new addAttendance_result();
        iface.addAttendance(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class addProductInspect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductInspect_args> {
      public addProductInspect() {
        super("addProductInspect");
      }

      public addProductInspect_args getEmptyArgsInstance() {
        return new addProductInspect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductInspect_result getResult(I iface, addProductInspect_args args) throws org.apache.thrift.TException {
        addProductInspect_result result = new addProductInspect_result();
        iface.addProductInspect(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class addProductPack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductPack_args> {
      public addProductPack() {
        super("addProductPack");
      }

      public addProductPack_args getEmptyArgsInstance() {
        return new addProductPack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductPack_result getResult(I iface, addProductPack_args args) throws org.apache.thrift.TException {
        addProductPack_result result = new addProductPack_result();
        iface.addProductPack(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class setProductInspectState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setProductInspectState_args> {
      public setProductInspectState() {
        super("setProductInspectState");
      }

      public setProductInspectState_args getEmptyArgsInstance() {
        return new setProductInspectState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setProductInspectState_result getResult(I iface, setProductInspectState_args args) throws org.apache.thrift.TException {
        setProductInspectState_result result = new setProductInspectState_result();
        iface.setProductInspectState(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class addOperatingState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOperatingState_args> {
      public addOperatingState() {
        super("addOperatingState");
      }

      public addOperatingState_args getEmptyArgsInstance() {
        return new addOperatingState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOperatingState_result getResult(I iface, addOperatingState_args args) throws org.apache.thrift.TException {
        addOperatingState_result result = new addOperatingState_result();
        iface.addOperatingState(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class addPlanTarget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPlanTarget_args> {
      public addPlanTarget() {
        super("addPlanTarget");
      }

      public addPlanTarget_args getEmptyArgsInstance() {
        return new addPlanTarget_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPlanTarget_result getResult(I iface, addPlanTarget_args args) throws org.apache.thrift.TException {
        addPlanTarget_result result = new addPlanTarget_result();
        iface.addPlanTarget(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class getPlanTarget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlanTarget_args> {
      public getPlanTarget() {
        super("getPlanTarget");
      }

      public getPlanTarget_args getEmptyArgsInstance() {
        return new getPlanTarget_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlanTarget_result getResult(I iface, getPlanTarget_args args) throws org.apache.thrift.TException {
        getPlanTarget_result result = new getPlanTarget_result();
        result.success = iface.getPlanTarget(args.accessKey, args.dataMap);
        return result;
      }
    }

    public static class getCurrentOnJobWorkerNums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentOnJobWorkerNums_args> {
      public getCurrentOnJobWorkerNums() {
        super("getCurrentOnJobWorkerNums");
      }

      public getCurrentOnJobWorkerNums_args getEmptyArgsInstance() {
        return new getCurrentOnJobWorkerNums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentOnJobWorkerNums_result getResult(I iface, getCurrentOnJobWorkerNums_args args) throws org.apache.thrift.TException {
        getCurrentOnJobWorkerNums_result result = new getCurrentOnJobWorkerNums_result();
        result.success = iface.getCurrentOnJobWorkerNums(args.accessKey, args.entityIds);
        return result;
      }
    }

    public static class getOriProductOutputNums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOriProductOutputNums_args> {
      public getOriProductOutputNums() {
        super("getOriProductOutputNums");
      }

      public getOriProductOutputNums_args getEmptyArgsInstance() {
        return new getOriProductOutputNums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOriProductOutputNums_result getResult(I iface, getOriProductOutputNums_args args) throws org.apache.thrift.TException {
        getOriProductOutputNums_result result = new getOriProductOutputNums_result();
        result.success = iface.getOriProductOutputNums(args.accessKey, args.entityIds, args.startTime, args.endTime);
        return result;
      }
    }

    public static class getFTRProductNums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFTRProductNums_args> {
      public getFTRProductNums() {
        super("getFTRProductNums");
      }

      public getFTRProductNums_args getEmptyArgsInstance() {
        return new getFTRProductNums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFTRProductNums_result getResult(I iface, getFTRProductNums_args args) throws org.apache.thrift.TException {
        getFTRProductNums_result result = new getFTRProductNums_result();
        result.success = iface.getFTRProductNums(args.accessKey, args.entityIds, args.startTime, args.endTime);
        return result;
      }
    }

    public static class getFailProductInspectNums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFailProductInspectNums_args> {
      public getFailProductInspectNums() {
        super("getFailProductInspectNums");
      }

      public getFailProductInspectNums_args getEmptyArgsInstance() {
        return new getFailProductInspectNums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFailProductInspectNums_result getResult(I iface, getFailProductInspectNums_args args) throws org.apache.thrift.TException {
        getFailProductInspectNums_result result = new getFailProductInspectNums_result();
        result.success = iface.getFailProductInspectNums(args.accessKey, args.entityIds, args.startTime, args.endTime);
        return result;
      }
    }

    public static class getProductOutputNums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductOutputNums_args> {
      public getProductOutputNums() {
        super("getProductOutputNums");
      }

      public getProductOutputNums_args getEmptyArgsInstance() {
        return new getProductOutputNums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductOutputNums_result getResult(I iface, getProductOutputNums_args args) throws org.apache.thrift.TException {
        getProductOutputNums_result result = new getProductOutputNums_result();
        result.success = iface.getProductOutputNums(args.accessKey, args.entityIds, args.startTime, args.endTime);
        return result;
      }
    }

    public static class getProductOutputNumsByPartId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductOutputNumsByPartId_args> {
      public getProductOutputNumsByPartId() {
        super("getProductOutputNumsByPartId");
      }

      public getProductOutputNumsByPartId_args getEmptyArgsInstance() {
        return new getProductOutputNumsByPartId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductOutputNumsByPartId_result getResult(I iface, getProductOutputNumsByPartId_args args) throws org.apache.thrift.TException {
        getProductOutputNumsByPartId_result result = new getProductOutputNumsByPartId_result();
        result.success = iface.getProductOutputNumsByPartId(args.accessKey, args.entityId, args.partId, args.startTime, args.endTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getOnJobTotalTimes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOnJobTotalTimes_args> {
      public getOnJobTotalTimes() {
        super("getOnJobTotalTimes");
      }

      public getOnJobTotalTimes_args getEmptyArgsInstance() {
        return new getOnJobTotalTimes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOnJobTotalTimes_result getResult(I iface, getOnJobTotalTimes_args args) throws org.apache.thrift.TException {
        getOnJobTotalTimes_result result = new getOnJobTotalTimes_result();
        result.success = iface.getOnJobTotalTimes(args.accessKey, args.entityIds, args.startTime, args.endTime);
        return result;
      }
    }

    public static class getProductOutputNumAndTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductOutputNumAndTime_args> {
      public getProductOutputNumAndTime() {
        super("getProductOutputNumAndTime");
      }

      public getProductOutputNumAndTime_args getEmptyArgsInstance() {
        return new getProductOutputNumAndTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductOutputNumAndTime_result getResult(I iface, getProductOutputNumAndTime_args args) throws org.apache.thrift.TException {
        getProductOutputNumAndTime_result result = new getProductOutputNumAndTime_result();
        result.success = iface.getProductOutputNumAndTime(args.accessKey, args.entityId, args.startTime, args.endTime);
        return result;
      }
    }

  }

  public static class addAttendance_args implements org.apache.thrift.TBase<addAttendance_args, addAttendance_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAttendance_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAttendance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAttendance_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAttendance_args.class, metaDataMap);
    }

    public addAttendance_args() {
    }

    public addAttendance_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAttendance_args(addAttendance_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public addAttendance_args deepCopy() {
      return new addAttendance_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public addAttendance_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public addAttendance_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAttendance_args)
        return this.equals((addAttendance_args)that);
      return false;
    }

    public boolean equals(addAttendance_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAttendance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAttendance_args typedOther = (addAttendance_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAttendance_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAttendance_argsStandardSchemeFactory implements SchemeFactory {
      public addAttendance_argsStandardScheme getScheme() {
        return new addAttendance_argsStandardScheme();
      }
    }

    private static class addAttendance_argsStandardScheme extends StandardScheme<addAttendance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAttendance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2; // required
                    String _val3; // required
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.dataMap.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAttendance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter4 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAttendance_argsTupleSchemeFactory implements SchemeFactory {
      public addAttendance_argsTupleScheme getScheme() {
        return new addAttendance_argsTupleScheme();
      }
    }

    private static class addAttendance_argsTupleScheme extends TupleScheme<addAttendance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAttendance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter5 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAttendance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8; // required
              String _val9; // required
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.dataMap.put(_key8, _val9);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class addAttendance_result implements org.apache.thrift.TBase<addAttendance_result, addAttendance_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAttendance_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAttendance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAttendance_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAttendance_result.class, metaDataMap);
    }

    public addAttendance_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAttendance_result(addAttendance_result other) {
    }

    public addAttendance_result deepCopy() {
      return new addAttendance_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAttendance_result)
        return this.equals((addAttendance_result)that);
      return false;
    }

    public boolean equals(addAttendance_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAttendance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAttendance_result typedOther = (addAttendance_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAttendance_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAttendance_resultStandardSchemeFactory implements SchemeFactory {
      public addAttendance_resultStandardScheme getScheme() {
        return new addAttendance_resultStandardScheme();
      }
    }

    private static class addAttendance_resultStandardScheme extends StandardScheme<addAttendance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAttendance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAttendance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAttendance_resultTupleSchemeFactory implements SchemeFactory {
      public addAttendance_resultTupleScheme getScheme() {
        return new addAttendance_resultTupleScheme();
      }
    }

    private static class addAttendance_resultTupleScheme extends TupleScheme<addAttendance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAttendance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAttendance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addProductInspect_args implements org.apache.thrift.TBase<addProductInspect_args, addProductInspect_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductInspect_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductInspect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductInspect_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductInspect_args.class, metaDataMap);
    }

    public addProductInspect_args() {
    }

    public addProductInspect_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductInspect_args(addProductInspect_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public addProductInspect_args deepCopy() {
      return new addProductInspect_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public addProductInspect_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public addProductInspect_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductInspect_args)
        return this.equals((addProductInspect_args)that);
      return false;
    }

    public boolean equals(addProductInspect_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addProductInspect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addProductInspect_args typedOther = (addProductInspect_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductInspect_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductInspect_argsStandardSchemeFactory implements SchemeFactory {
      public addProductInspect_argsStandardScheme getScheme() {
        return new addProductInspect_argsStandardScheme();
      }
    }

    private static class addProductInspect_argsStandardScheme extends StandardScheme<addProductInspect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductInspect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    String _key12; // required
                    String _val13; // required
                    _key12 = iprot.readString();
                    _val13 = iprot.readString();
                    struct.dataMap.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductInspect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter14 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductInspect_argsTupleSchemeFactory implements SchemeFactory {
      public addProductInspect_argsTupleScheme getScheme() {
        return new addProductInspect_argsTupleScheme();
      }
    }

    private static class addProductInspect_argsTupleScheme extends TupleScheme<addProductInspect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductInspect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter15 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductInspect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map16.size);
            for (int _i17 = 0; _i17 < _map16.size; ++_i17)
            {
              String _key18; // required
              String _val19; // required
              _key18 = iprot.readString();
              _val19 = iprot.readString();
              struct.dataMap.put(_key18, _val19);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class addProductInspect_result implements org.apache.thrift.TBase<addProductInspect_result, addProductInspect_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductInspect_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductInspect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductInspect_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductInspect_result.class, metaDataMap);
    }

    public addProductInspect_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductInspect_result(addProductInspect_result other) {
    }

    public addProductInspect_result deepCopy() {
      return new addProductInspect_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductInspect_result)
        return this.equals((addProductInspect_result)that);
      return false;
    }

    public boolean equals(addProductInspect_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addProductInspect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addProductInspect_result typedOther = (addProductInspect_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductInspect_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductInspect_resultStandardSchemeFactory implements SchemeFactory {
      public addProductInspect_resultStandardScheme getScheme() {
        return new addProductInspect_resultStandardScheme();
      }
    }

    private static class addProductInspect_resultStandardScheme extends StandardScheme<addProductInspect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductInspect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductInspect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductInspect_resultTupleSchemeFactory implements SchemeFactory {
      public addProductInspect_resultTupleScheme getScheme() {
        return new addProductInspect_resultTupleScheme();
      }
    }

    private static class addProductInspect_resultTupleScheme extends TupleScheme<addProductInspect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductInspect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductInspect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addProductPack_args implements org.apache.thrift.TBase<addProductPack_args, addProductPack_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductPack_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductPack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductPack_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductPack_args.class, metaDataMap);
    }

    public addProductPack_args() {
    }

    public addProductPack_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductPack_args(addProductPack_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public addProductPack_args deepCopy() {
      return new addProductPack_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public addProductPack_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public addProductPack_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductPack_args)
        return this.equals((addProductPack_args)that);
      return false;
    }

    public boolean equals(addProductPack_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addProductPack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addProductPack_args typedOther = (addProductPack_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductPack_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductPack_argsStandardSchemeFactory implements SchemeFactory {
      public addProductPack_argsStandardScheme getScheme() {
        return new addProductPack_argsStandardScheme();
      }
    }

    private static class addProductPack_argsStandardScheme extends StandardScheme<addProductPack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductPack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map20.size);
                  for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                  {
                    String _key22; // required
                    String _val23; // required
                    _key22 = iprot.readString();
                    _val23 = iprot.readString();
                    struct.dataMap.put(_key22, _val23);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductPack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter24 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductPack_argsTupleSchemeFactory implements SchemeFactory {
      public addProductPack_argsTupleScheme getScheme() {
        return new addProductPack_argsTupleScheme();
      }
    }

    private static class addProductPack_argsTupleScheme extends TupleScheme<addProductPack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductPack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter25 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductPack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map26.size);
            for (int _i27 = 0; _i27 < _map26.size; ++_i27)
            {
              String _key28; // required
              String _val29; // required
              _key28 = iprot.readString();
              _val29 = iprot.readString();
              struct.dataMap.put(_key28, _val29);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class addProductPack_result implements org.apache.thrift.TBase<addProductPack_result, addProductPack_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductPack_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductPack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductPack_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductPack_result.class, metaDataMap);
    }

    public addProductPack_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductPack_result(addProductPack_result other) {
    }

    public addProductPack_result deepCopy() {
      return new addProductPack_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductPack_result)
        return this.equals((addProductPack_result)that);
      return false;
    }

    public boolean equals(addProductPack_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addProductPack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addProductPack_result typedOther = (addProductPack_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductPack_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductPack_resultStandardSchemeFactory implements SchemeFactory {
      public addProductPack_resultStandardScheme getScheme() {
        return new addProductPack_resultStandardScheme();
      }
    }

    private static class addProductPack_resultStandardScheme extends StandardScheme<addProductPack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductPack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductPack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductPack_resultTupleSchemeFactory implements SchemeFactory {
      public addProductPack_resultTupleScheme getScheme() {
        return new addProductPack_resultTupleScheme();
      }
    }

    private static class addProductPack_resultTupleScheme extends TupleScheme<addProductPack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductPack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductPack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setProductInspectState_args implements org.apache.thrift.TBase<setProductInspectState_args, setProductInspectState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProductInspectState_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setProductInspectState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setProductInspectState_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProductInspectState_args.class, metaDataMap);
    }

    public setProductInspectState_args() {
    }

    public setProductInspectState_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setProductInspectState_args(setProductInspectState_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public setProductInspectState_args deepCopy() {
      return new setProductInspectState_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public setProductInspectState_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public setProductInspectState_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setProductInspectState_args)
        return this.equals((setProductInspectState_args)that);
      return false;
    }

    public boolean equals(setProductInspectState_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setProductInspectState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setProductInspectState_args typedOther = (setProductInspectState_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setProductInspectState_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setProductInspectState_argsStandardSchemeFactory implements SchemeFactory {
      public setProductInspectState_argsStandardScheme getScheme() {
        return new setProductInspectState_argsStandardScheme();
      }
    }

    private static class setProductInspectState_argsStandardScheme extends StandardScheme<setProductInspectState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setProductInspectState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map30.size);
                  for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                  {
                    String _key32; // required
                    String _val33; // required
                    _key32 = iprot.readString();
                    _val33 = iprot.readString();
                    struct.dataMap.put(_key32, _val33);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setProductInspectState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter34 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setProductInspectState_argsTupleSchemeFactory implements SchemeFactory {
      public setProductInspectState_argsTupleScheme getScheme() {
        return new setProductInspectState_argsTupleScheme();
      }
    }

    private static class setProductInspectState_argsTupleScheme extends TupleScheme<setProductInspectState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setProductInspectState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter35 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setProductInspectState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map36.size);
            for (int _i37 = 0; _i37 < _map36.size; ++_i37)
            {
              String _key38; // required
              String _val39; // required
              _key38 = iprot.readString();
              _val39 = iprot.readString();
              struct.dataMap.put(_key38, _val39);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class setProductInspectState_result implements org.apache.thrift.TBase<setProductInspectState_result, setProductInspectState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProductInspectState_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setProductInspectState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setProductInspectState_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProductInspectState_result.class, metaDataMap);
    }

    public setProductInspectState_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setProductInspectState_result(setProductInspectState_result other) {
    }

    public setProductInspectState_result deepCopy() {
      return new setProductInspectState_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setProductInspectState_result)
        return this.equals((setProductInspectState_result)that);
      return false;
    }

    public boolean equals(setProductInspectState_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setProductInspectState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setProductInspectState_result typedOther = (setProductInspectState_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setProductInspectState_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setProductInspectState_resultStandardSchemeFactory implements SchemeFactory {
      public setProductInspectState_resultStandardScheme getScheme() {
        return new setProductInspectState_resultStandardScheme();
      }
    }

    private static class setProductInspectState_resultStandardScheme extends StandardScheme<setProductInspectState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setProductInspectState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setProductInspectState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setProductInspectState_resultTupleSchemeFactory implements SchemeFactory {
      public setProductInspectState_resultTupleScheme getScheme() {
        return new setProductInspectState_resultTupleScheme();
      }
    }

    private static class setProductInspectState_resultTupleScheme extends TupleScheme<setProductInspectState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setProductInspectState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setProductInspectState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addOperatingState_args implements org.apache.thrift.TBase<addOperatingState_args, addOperatingState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperatingState_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOperatingState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOperatingState_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperatingState_args.class, metaDataMap);
    }

    public addOperatingState_args() {
    }

    public addOperatingState_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperatingState_args(addOperatingState_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public addOperatingState_args deepCopy() {
      return new addOperatingState_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public addOperatingState_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public addOperatingState_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperatingState_args)
        return this.equals((addOperatingState_args)that);
      return false;
    }

    public boolean equals(addOperatingState_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addOperatingState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addOperatingState_args typedOther = (addOperatingState_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOperatingState_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperatingState_argsStandardSchemeFactory implements SchemeFactory {
      public addOperatingState_argsStandardScheme getScheme() {
        return new addOperatingState_argsStandardScheme();
      }
    }

    private static class addOperatingState_argsStandardScheme extends StandardScheme<addOperatingState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperatingState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map40.size);
                  for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                  {
                    String _key42; // required
                    String _val43; // required
                    _key42 = iprot.readString();
                    _val43 = iprot.readString();
                    struct.dataMap.put(_key42, _val43);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperatingState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter44 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperatingState_argsTupleSchemeFactory implements SchemeFactory {
      public addOperatingState_argsTupleScheme getScheme() {
        return new addOperatingState_argsTupleScheme();
      }
    }

    private static class addOperatingState_argsTupleScheme extends TupleScheme<addOperatingState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperatingState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter45 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperatingState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map46.size);
            for (int _i47 = 0; _i47 < _map46.size; ++_i47)
            {
              String _key48; // required
              String _val49; // required
              _key48 = iprot.readString();
              _val49 = iprot.readString();
              struct.dataMap.put(_key48, _val49);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class addOperatingState_result implements org.apache.thrift.TBase<addOperatingState_result, addOperatingState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperatingState_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOperatingState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOperatingState_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperatingState_result.class, metaDataMap);
    }

    public addOperatingState_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperatingState_result(addOperatingState_result other) {
    }

    public addOperatingState_result deepCopy() {
      return new addOperatingState_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperatingState_result)
        return this.equals((addOperatingState_result)that);
      return false;
    }

    public boolean equals(addOperatingState_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addOperatingState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addOperatingState_result typedOther = (addOperatingState_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOperatingState_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperatingState_resultStandardSchemeFactory implements SchemeFactory {
      public addOperatingState_resultStandardScheme getScheme() {
        return new addOperatingState_resultStandardScheme();
      }
    }

    private static class addOperatingState_resultStandardScheme extends StandardScheme<addOperatingState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperatingState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperatingState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperatingState_resultTupleSchemeFactory implements SchemeFactory {
      public addOperatingState_resultTupleScheme getScheme() {
        return new addOperatingState_resultTupleScheme();
      }
    }

    private static class addOperatingState_resultTupleScheme extends TupleScheme<addOperatingState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperatingState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperatingState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addPlanTarget_args implements org.apache.thrift.TBase<addPlanTarget_args, addPlanTarget_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlanTarget_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPlanTarget_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPlanTarget_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlanTarget_args.class, metaDataMap);
    }

    public addPlanTarget_args() {
    }

    public addPlanTarget_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlanTarget_args(addPlanTarget_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public addPlanTarget_args deepCopy() {
      return new addPlanTarget_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public addPlanTarget_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public addPlanTarget_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlanTarget_args)
        return this.equals((addPlanTarget_args)that);
      return false;
    }

    public boolean equals(addPlanTarget_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPlanTarget_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPlanTarget_args typedOther = (addPlanTarget_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPlanTarget_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlanTarget_argsStandardSchemeFactory implements SchemeFactory {
      public addPlanTarget_argsStandardScheme getScheme() {
        return new addPlanTarget_argsStandardScheme();
      }
    }

    private static class addPlanTarget_argsStandardScheme extends StandardScheme<addPlanTarget_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlanTarget_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map50.size);
                  for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                  {
                    String _key52; // required
                    String _val53; // required
                    _key52 = iprot.readString();
                    _val53 = iprot.readString();
                    struct.dataMap.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlanTarget_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter54 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlanTarget_argsTupleSchemeFactory implements SchemeFactory {
      public addPlanTarget_argsTupleScheme getScheme() {
        return new addPlanTarget_argsTupleScheme();
      }
    }

    private static class addPlanTarget_argsTupleScheme extends TupleScheme<addPlanTarget_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlanTarget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter55 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlanTarget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map56.size);
            for (int _i57 = 0; _i57 < _map56.size; ++_i57)
            {
              String _key58; // required
              String _val59; // required
              _key58 = iprot.readString();
              _val59 = iprot.readString();
              struct.dataMap.put(_key58, _val59);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class addPlanTarget_result implements org.apache.thrift.TBase<addPlanTarget_result, addPlanTarget_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlanTarget_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPlanTarget_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPlanTarget_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlanTarget_result.class, metaDataMap);
    }

    public addPlanTarget_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlanTarget_result(addPlanTarget_result other) {
    }

    public addPlanTarget_result deepCopy() {
      return new addPlanTarget_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlanTarget_result)
        return this.equals((addPlanTarget_result)that);
      return false;
    }

    public boolean equals(addPlanTarget_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPlanTarget_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPlanTarget_result typedOther = (addPlanTarget_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPlanTarget_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlanTarget_resultStandardSchemeFactory implements SchemeFactory {
      public addPlanTarget_resultStandardScheme getScheme() {
        return new addPlanTarget_resultStandardScheme();
      }
    }

    private static class addPlanTarget_resultStandardScheme extends StandardScheme<addPlanTarget_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlanTarget_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlanTarget_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlanTarget_resultTupleSchemeFactory implements SchemeFactory {
      public addPlanTarget_resultTupleScheme getScheme() {
        return new addPlanTarget_resultTupleScheme();
      }
    }

    private static class addPlanTarget_resultTupleScheme extends TupleScheme<addPlanTarget_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlanTarget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlanTarget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPlanTarget_args implements org.apache.thrift.TBase<getPlanTarget_args, getPlanTarget_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlanTarget_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlanTarget_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlanTarget_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Map<String,String> dataMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      DATA_MAP((short)2, "dataMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // DATA_MAP
            return DATA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlanTarget_args.class, metaDataMap);
    }

    public getPlanTarget_args() {
    }

    public getPlanTarget_args(
      String accessKey,
      Map<String,String> dataMap)
    {
      this();
      this.accessKey = accessKey;
      this.dataMap = dataMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlanTarget_args(getPlanTarget_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetDataMap()) {
        Map<String,String> __this__dataMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.dataMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__dataMap_copy_key = other_element_key;

          String __this__dataMap_copy_value = other_element_value;

          __this__dataMap.put(__this__dataMap_copy_key, __this__dataMap_copy_value);
        }
        this.dataMap = __this__dataMap;
      }
    }

    public getPlanTarget_args deepCopy() {
      return new getPlanTarget_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.dataMap = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getPlanTarget_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getDataMapSize() {
      return (this.dataMap == null) ? 0 : this.dataMap.size();
    }

    public void putToDataMap(String key, String val) {
      if (this.dataMap == null) {
        this.dataMap = new HashMap<String,String>();
      }
      this.dataMap.put(key, val);
    }

    public Map<String,String> getDataMap() {
      return this.dataMap;
    }

    public getPlanTarget_args setDataMap(Map<String,String> dataMap) {
      this.dataMap = dataMap;
      return this;
    }

    public void unsetDataMap() {
      this.dataMap = null;
    }

    /** Returns true if field dataMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMap() {
      return this.dataMap != null;
    }

    public void setDataMapIsSet(boolean value) {
      if (!value) {
        this.dataMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case DATA_MAP:
        if (value == null) {
          unsetDataMap();
        } else {
          setDataMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case DATA_MAP:
        return getDataMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case DATA_MAP:
        return isSetDataMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlanTarget_args)
        return this.equals((getPlanTarget_args)that);
      return false;
    }

    public boolean equals(getPlanTarget_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_dataMap = true && this.isSetDataMap();
      boolean that_present_dataMap = true && that.isSetDataMap();
      if (this_present_dataMap || that_present_dataMap) {
        if (!(this_present_dataMap && that_present_dataMap))
          return false;
        if (!this.dataMap.equals(that.dataMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlanTarget_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlanTarget_args typedOther = (getPlanTarget_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMap()).compareTo(typedOther.isSetDataMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMap, typedOther.dataMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlanTarget_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMap:");
      if (this.dataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlanTarget_argsStandardSchemeFactory implements SchemeFactory {
      public getPlanTarget_argsStandardScheme getScheme() {
        return new getPlanTarget_argsStandardScheme();
      }
    }

    private static class getPlanTarget_argsStandardScheme extends StandardScheme<getPlanTarget_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlanTarget_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                  struct.dataMap = new HashMap<String,String>(2*_map60.size);
                  for (int _i61 = 0; _i61 < _map60.size; ++_i61)
                  {
                    String _key62; // required
                    String _val63; // required
                    _key62 = iprot.readString();
                    _val63 = iprot.readString();
                    struct.dataMap.put(_key62, _val63);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlanTarget_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataMap != null) {
          oprot.writeFieldBegin(DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dataMap.size()));
            for (Map.Entry<String, String> _iter64 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeString(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlanTarget_argsTupleSchemeFactory implements SchemeFactory {
      public getPlanTarget_argsTupleScheme getScheme() {
        return new getPlanTarget_argsTupleScheme();
      }
    }

    private static class getPlanTarget_argsTupleScheme extends TupleScheme<getPlanTarget_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlanTarget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetDataMap()) {
          {
            oprot.writeI32(struct.dataMap.size());
            for (Map.Entry<String, String> _iter65 : struct.dataMap.entrySet())
            {
              oprot.writeString(_iter65.getKey());
              oprot.writeString(_iter65.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlanTarget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dataMap = new HashMap<String,String>(2*_map66.size);
            for (int _i67 = 0; _i67 < _map66.size; ++_i67)
            {
              String _key68; // required
              String _val69; // required
              _key68 = iprot.readString();
              _val69 = iprot.readString();
              struct.dataMap.put(_key68, _val69);
            }
          }
          struct.setDataMapIsSet(true);
        }
      }
    }

  }

  public static class getPlanTarget_result implements org.apache.thrift.TBase<getPlanTarget_result, getPlanTarget_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlanTarget_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlanTarget_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlanTarget_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlanTarget_result.class, metaDataMap);
    }

    public getPlanTarget_result() {
    }

    public getPlanTarget_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlanTarget_result(getPlanTarget_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getPlanTarget_result deepCopy() {
      return new getPlanTarget_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getPlanTarget_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlanTarget_result)
        return this.equals((getPlanTarget_result)that);
      return false;
    }

    public boolean equals(getPlanTarget_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlanTarget_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlanTarget_result typedOther = (getPlanTarget_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlanTarget_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlanTarget_resultStandardSchemeFactory implements SchemeFactory {
      public getPlanTarget_resultStandardScheme getScheme() {
        return new getPlanTarget_resultStandardScheme();
      }
    }

    private static class getPlanTarget_resultStandardScheme extends StandardScheme<getPlanTarget_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlanTarget_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map70.size);
                  for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                  {
                    String _key72; // required
                    String _val73; // required
                    _key72 = iprot.readString();
                    _val73 = iprot.readString();
                    struct.success.put(_key72, _val73);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlanTarget_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter74 : struct.success.entrySet())
            {
              oprot.writeString(_iter74.getKey());
              oprot.writeString(_iter74.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlanTarget_resultTupleSchemeFactory implements SchemeFactory {
      public getPlanTarget_resultTupleScheme getScheme() {
        return new getPlanTarget_resultTupleScheme();
      }
    }

    private static class getPlanTarget_resultTupleScheme extends TupleScheme<getPlanTarget_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlanTarget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter75 : struct.success.entrySet())
            {
              oprot.writeString(_iter75.getKey());
              oprot.writeString(_iter75.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlanTarget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map76.size);
            for (int _i77 = 0; _i77 < _map76.size; ++_i77)
            {
              String _key78; // required
              String _val79; // required
              _key78 = iprot.readString();
              _val79 = iprot.readString();
              struct.success.put(_key78, _val79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentOnJobWorkerNums_args implements org.apache.thrift.TBase<getCurrentOnJobWorkerNums_args, getCurrentOnJobWorkerNums_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentOnJobWorkerNums_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIds", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentOnJobWorkerNums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentOnJobWorkerNums_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Set<String> entityIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_IDS((short)2, "entityIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_IDS
            return ENTITY_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentOnJobWorkerNums_args.class, metaDataMap);
    }

    public getCurrentOnJobWorkerNums_args() {
    }

    public getCurrentOnJobWorkerNums_args(
      String accessKey,
      Set<String> entityIds)
    {
      this();
      this.accessKey = accessKey;
      this.entityIds = entityIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentOnJobWorkerNums_args(getCurrentOnJobWorkerNums_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityIds()) {
        Set<String> __this__entityIds = new HashSet<String>();
        for (String other_element : other.entityIds) {
          __this__entityIds.add(other_element);
        }
        this.entityIds = __this__entityIds;
      }
    }

    public getCurrentOnJobWorkerNums_args deepCopy() {
      return new getCurrentOnJobWorkerNums_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityIds = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getCurrentOnJobWorkerNums_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getEntityIdsSize() {
      return (this.entityIds == null) ? 0 : this.entityIds.size();
    }

    public java.util.Iterator<String> getEntityIdsIterator() {
      return (this.entityIds == null) ? null : this.entityIds.iterator();
    }

    public void addToEntityIds(String elem) {
      if (this.entityIds == null) {
        this.entityIds = new HashSet<String>();
      }
      this.entityIds.add(elem);
    }

    public Set<String> getEntityIds() {
      return this.entityIds;
    }

    public getCurrentOnJobWorkerNums_args setEntityIds(Set<String> entityIds) {
      this.entityIds = entityIds;
      return this;
    }

    public void unsetEntityIds() {
      this.entityIds = null;
    }

    /** Returns true if field entityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIds() {
      return this.entityIds != null;
    }

    public void setEntityIdsIsSet(boolean value) {
      if (!value) {
        this.entityIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_IDS:
        if (value == null) {
          unsetEntityIds();
        } else {
          setEntityIds((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_IDS:
        return getEntityIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_IDS:
        return isSetEntityIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentOnJobWorkerNums_args)
        return this.equals((getCurrentOnJobWorkerNums_args)that);
      return false;
    }

    public boolean equals(getCurrentOnJobWorkerNums_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityIds = true && this.isSetEntityIds();
      boolean that_present_entityIds = true && that.isSetEntityIds();
      if (this_present_entityIds || that_present_entityIds) {
        if (!(this_present_entityIds && that_present_entityIds))
          return false;
        if (!this.entityIds.equals(that.entityIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCurrentOnJobWorkerNums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCurrentOnJobWorkerNums_args typedOther = (getCurrentOnJobWorkerNums_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIds()).compareTo(typedOther.isSetEntityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIds, typedOther.entityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentOnJobWorkerNums_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIds:");
      if (this.entityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentOnJobWorkerNums_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentOnJobWorkerNums_argsStandardScheme getScheme() {
        return new getCurrentOnJobWorkerNums_argsStandardScheme();
      }
    }

    private static class getCurrentOnJobWorkerNums_argsStandardScheme extends StandardScheme<getCurrentOnJobWorkerNums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentOnJobWorkerNums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set80 = iprot.readSetBegin();
                  struct.entityIds = new HashSet<String>(2*_set80.size);
                  for (int _i81 = 0; _i81 < _set80.size; ++_i81)
                  {
                    String _elem82; // required
                    _elem82 = iprot.readString();
                    struct.entityIds.add(_elem82);
                  }
                  iprot.readSetEnd();
                }
                struct.setEntityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentOnJobWorkerNums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityIds != null) {
          oprot.writeFieldBegin(ENTITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.entityIds.size()));
            for (String _iter83 : struct.entityIds)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentOnJobWorkerNums_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentOnJobWorkerNums_argsTupleScheme getScheme() {
        return new getCurrentOnJobWorkerNums_argsTupleScheme();
      }
    }

    private static class getCurrentOnJobWorkerNums_argsTupleScheme extends TupleScheme<getCurrentOnJobWorkerNums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentOnJobWorkerNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityIds()) {
          {
            oprot.writeI32(struct.entityIds.size());
            for (String _iter84 : struct.entityIds)
            {
              oprot.writeString(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentOnJobWorkerNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set85 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entityIds = new HashSet<String>(2*_set85.size);
            for (int _i86 = 0; _i86 < _set85.size; ++_i86)
            {
              String _elem87; // required
              _elem87 = iprot.readString();
              struct.entityIds.add(_elem87);
            }
          }
          struct.setEntityIdsIsSet(true);
        }
      }
    }

  }

  public static class getCurrentOnJobWorkerNums_result implements org.apache.thrift.TBase<getCurrentOnJobWorkerNums_result, getCurrentOnJobWorkerNums_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentOnJobWorkerNums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentOnJobWorkerNums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentOnJobWorkerNums_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentOnJobWorkerNums_result.class, metaDataMap);
    }

    public getCurrentOnJobWorkerNums_result() {
    }

    public getCurrentOnJobWorkerNums_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentOnJobWorkerNums_result(getCurrentOnJobWorkerNums_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getCurrentOnJobWorkerNums_result deepCopy() {
      return new getCurrentOnJobWorkerNums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public getCurrentOnJobWorkerNums_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentOnJobWorkerNums_result)
        return this.equals((getCurrentOnJobWorkerNums_result)that);
      return false;
    }

    public boolean equals(getCurrentOnJobWorkerNums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCurrentOnJobWorkerNums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCurrentOnJobWorkerNums_result typedOther = (getCurrentOnJobWorkerNums_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentOnJobWorkerNums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentOnJobWorkerNums_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentOnJobWorkerNums_resultStandardScheme getScheme() {
        return new getCurrentOnJobWorkerNums_resultStandardScheme();
      }
    }

    private static class getCurrentOnJobWorkerNums_resultStandardScheme extends StandardScheme<getCurrentOnJobWorkerNums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentOnJobWorkerNums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map88.size);
                  for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                  {
                    String _key90; // required
                    long _val91; // required
                    _key90 = iprot.readString();
                    _val91 = iprot.readI64();
                    struct.success.put(_key90, _val91);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentOnJobWorkerNums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter92 : struct.success.entrySet())
            {
              oprot.writeString(_iter92.getKey());
              oprot.writeI64(_iter92.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentOnJobWorkerNums_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentOnJobWorkerNums_resultTupleScheme getScheme() {
        return new getCurrentOnJobWorkerNums_resultTupleScheme();
      }
    }

    private static class getCurrentOnJobWorkerNums_resultTupleScheme extends TupleScheme<getCurrentOnJobWorkerNums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentOnJobWorkerNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter93 : struct.success.entrySet())
            {
              oprot.writeString(_iter93.getKey());
              oprot.writeI64(_iter93.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentOnJobWorkerNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map94.size);
            for (int _i95 = 0; _i95 < _map94.size; ++_i95)
            {
              String _key96; // required
              long _val97; // required
              _key96 = iprot.readString();
              _val97 = iprot.readI64();
              struct.success.put(_key96, _val97);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOriProductOutputNums_args implements org.apache.thrift.TBase<getOriProductOutputNums_args, getOriProductOutputNums_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOriProductOutputNums_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIds", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOriProductOutputNums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOriProductOutputNums_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Set<String> entityIds; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_IDS((short)2, "entityIds"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_IDS
            return ENTITY_IDS;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOriProductOutputNums_args.class, metaDataMap);
    }

    public getOriProductOutputNums_args() {
    }

    public getOriProductOutputNums_args(
      String accessKey,
      Set<String> entityIds,
      long startTime,
      long endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityIds = entityIds;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOriProductOutputNums_args(getOriProductOutputNums_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityIds()) {
        Set<String> __this__entityIds = new HashSet<String>();
        for (String other_element : other.entityIds) {
          __this__entityIds.add(other_element);
        }
        this.entityIds = __this__entityIds;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getOriProductOutputNums_args deepCopy() {
      return new getOriProductOutputNums_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityIds = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getOriProductOutputNums_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getEntityIdsSize() {
      return (this.entityIds == null) ? 0 : this.entityIds.size();
    }

    public java.util.Iterator<String> getEntityIdsIterator() {
      return (this.entityIds == null) ? null : this.entityIds.iterator();
    }

    public void addToEntityIds(String elem) {
      if (this.entityIds == null) {
        this.entityIds = new HashSet<String>();
      }
      this.entityIds.add(elem);
    }

    public Set<String> getEntityIds() {
      return this.entityIds;
    }

    public getOriProductOutputNums_args setEntityIds(Set<String> entityIds) {
      this.entityIds = entityIds;
      return this;
    }

    public void unsetEntityIds() {
      this.entityIds = null;
    }

    /** Returns true if field entityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIds() {
      return this.entityIds != null;
    }

    public void setEntityIdsIsSet(boolean value) {
      if (!value) {
        this.entityIds = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getOriProductOutputNums_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getOriProductOutputNums_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_IDS:
        if (value == null) {
          unsetEntityIds();
        } else {
          setEntityIds((Set<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_IDS:
        return getEntityIds();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_IDS:
        return isSetEntityIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOriProductOutputNums_args)
        return this.equals((getOriProductOutputNums_args)that);
      return false;
    }

    public boolean equals(getOriProductOutputNums_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityIds = true && this.isSetEntityIds();
      boolean that_present_entityIds = true && that.isSetEntityIds();
      if (this_present_entityIds || that_present_entityIds) {
        if (!(this_present_entityIds && that_present_entityIds))
          return false;
        if (!this.entityIds.equals(that.entityIds))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOriProductOutputNums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOriProductOutputNums_args typedOther = (getOriProductOutputNums_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIds()).compareTo(typedOther.isSetEntityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIds, typedOther.entityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOriProductOutputNums_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIds:");
      if (this.entityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOriProductOutputNums_argsStandardSchemeFactory implements SchemeFactory {
      public getOriProductOutputNums_argsStandardScheme getScheme() {
        return new getOriProductOutputNums_argsStandardScheme();
      }
    }

    private static class getOriProductOutputNums_argsStandardScheme extends StandardScheme<getOriProductOutputNums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOriProductOutputNums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set98 = iprot.readSetBegin();
                  struct.entityIds = new HashSet<String>(2*_set98.size);
                  for (int _i99 = 0; _i99 < _set98.size; ++_i99)
                  {
                    String _elem100; // required
                    _elem100 = iprot.readString();
                    struct.entityIds.add(_elem100);
                  }
                  iprot.readSetEnd();
                }
                struct.setEntityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOriProductOutputNums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityIds != null) {
          oprot.writeFieldBegin(ENTITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.entityIds.size()));
            for (String _iter101 : struct.entityIds)
            {
              oprot.writeString(_iter101);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOriProductOutputNums_argsTupleSchemeFactory implements SchemeFactory {
      public getOriProductOutputNums_argsTupleScheme getScheme() {
        return new getOriProductOutputNums_argsTupleScheme();
      }
    }

    private static class getOriProductOutputNums_argsTupleScheme extends TupleScheme<getOriProductOutputNums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOriProductOutputNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIds()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityIds()) {
          {
            oprot.writeI32(struct.entityIds.size());
            for (String _iter102 : struct.entityIds)
            {
              oprot.writeString(_iter102);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOriProductOutputNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set103 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entityIds = new HashSet<String>(2*_set103.size);
            for (int _i104 = 0; _i104 < _set103.size; ++_i104)
            {
              String _elem105; // required
              _elem105 = iprot.readString();
              struct.entityIds.add(_elem105);
            }
          }
          struct.setEntityIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getOriProductOutputNums_result implements org.apache.thrift.TBase<getOriProductOutputNums_result, getOriProductOutputNums_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOriProductOutputNums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOriProductOutputNums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOriProductOutputNums_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOriProductOutputNums_result.class, metaDataMap);
    }

    public getOriProductOutputNums_result() {
    }

    public getOriProductOutputNums_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOriProductOutputNums_result(getOriProductOutputNums_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getOriProductOutputNums_result deepCopy() {
      return new getOriProductOutputNums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public getOriProductOutputNums_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOriProductOutputNums_result)
        return this.equals((getOriProductOutputNums_result)that);
      return false;
    }

    public boolean equals(getOriProductOutputNums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOriProductOutputNums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOriProductOutputNums_result typedOther = (getOriProductOutputNums_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOriProductOutputNums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOriProductOutputNums_resultStandardSchemeFactory implements SchemeFactory {
      public getOriProductOutputNums_resultStandardScheme getScheme() {
        return new getOriProductOutputNums_resultStandardScheme();
      }
    }

    private static class getOriProductOutputNums_resultStandardScheme extends StandardScheme<getOriProductOutputNums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOriProductOutputNums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map106.size);
                  for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                  {
                    String _key108; // required
                    long _val109; // required
                    _key108 = iprot.readString();
                    _val109 = iprot.readI64();
                    struct.success.put(_key108, _val109);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOriProductOutputNums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter110 : struct.success.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              oprot.writeI64(_iter110.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOriProductOutputNums_resultTupleSchemeFactory implements SchemeFactory {
      public getOriProductOutputNums_resultTupleScheme getScheme() {
        return new getOriProductOutputNums_resultTupleScheme();
      }
    }

    private static class getOriProductOutputNums_resultTupleScheme extends TupleScheme<getOriProductOutputNums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOriProductOutputNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter111 : struct.success.entrySet())
            {
              oprot.writeString(_iter111.getKey());
              oprot.writeI64(_iter111.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOriProductOutputNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map112.size);
            for (int _i113 = 0; _i113 < _map112.size; ++_i113)
            {
              String _key114; // required
              long _val115; // required
              _key114 = iprot.readString();
              _val115 = iprot.readI64();
              struct.success.put(_key114, _val115);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFTRProductNums_args implements org.apache.thrift.TBase<getFTRProductNums_args, getFTRProductNums_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFTRProductNums_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIds", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFTRProductNums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFTRProductNums_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Set<String> entityIds; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_IDS((short)2, "entityIds"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_IDS
            return ENTITY_IDS;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFTRProductNums_args.class, metaDataMap);
    }

    public getFTRProductNums_args() {
    }

    public getFTRProductNums_args(
      String accessKey,
      Set<String> entityIds,
      long startTime,
      long endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityIds = entityIds;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFTRProductNums_args(getFTRProductNums_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityIds()) {
        Set<String> __this__entityIds = new HashSet<String>();
        for (String other_element : other.entityIds) {
          __this__entityIds.add(other_element);
        }
        this.entityIds = __this__entityIds;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getFTRProductNums_args deepCopy() {
      return new getFTRProductNums_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityIds = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getFTRProductNums_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getEntityIdsSize() {
      return (this.entityIds == null) ? 0 : this.entityIds.size();
    }

    public java.util.Iterator<String> getEntityIdsIterator() {
      return (this.entityIds == null) ? null : this.entityIds.iterator();
    }

    public void addToEntityIds(String elem) {
      if (this.entityIds == null) {
        this.entityIds = new HashSet<String>();
      }
      this.entityIds.add(elem);
    }

    public Set<String> getEntityIds() {
      return this.entityIds;
    }

    public getFTRProductNums_args setEntityIds(Set<String> entityIds) {
      this.entityIds = entityIds;
      return this;
    }

    public void unsetEntityIds() {
      this.entityIds = null;
    }

    /** Returns true if field entityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIds() {
      return this.entityIds != null;
    }

    public void setEntityIdsIsSet(boolean value) {
      if (!value) {
        this.entityIds = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getFTRProductNums_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getFTRProductNums_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_IDS:
        if (value == null) {
          unsetEntityIds();
        } else {
          setEntityIds((Set<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_IDS:
        return getEntityIds();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_IDS:
        return isSetEntityIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFTRProductNums_args)
        return this.equals((getFTRProductNums_args)that);
      return false;
    }

    public boolean equals(getFTRProductNums_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityIds = true && this.isSetEntityIds();
      boolean that_present_entityIds = true && that.isSetEntityIds();
      if (this_present_entityIds || that_present_entityIds) {
        if (!(this_present_entityIds && that_present_entityIds))
          return false;
        if (!this.entityIds.equals(that.entityIds))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFTRProductNums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFTRProductNums_args typedOther = (getFTRProductNums_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIds()).compareTo(typedOther.isSetEntityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIds, typedOther.entityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFTRProductNums_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIds:");
      if (this.entityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFTRProductNums_argsStandardSchemeFactory implements SchemeFactory {
      public getFTRProductNums_argsStandardScheme getScheme() {
        return new getFTRProductNums_argsStandardScheme();
      }
    }

    private static class getFTRProductNums_argsStandardScheme extends StandardScheme<getFTRProductNums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFTRProductNums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set116 = iprot.readSetBegin();
                  struct.entityIds = new HashSet<String>(2*_set116.size);
                  for (int _i117 = 0; _i117 < _set116.size; ++_i117)
                  {
                    String _elem118; // required
                    _elem118 = iprot.readString();
                    struct.entityIds.add(_elem118);
                  }
                  iprot.readSetEnd();
                }
                struct.setEntityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFTRProductNums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityIds != null) {
          oprot.writeFieldBegin(ENTITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.entityIds.size()));
            for (String _iter119 : struct.entityIds)
            {
              oprot.writeString(_iter119);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFTRProductNums_argsTupleSchemeFactory implements SchemeFactory {
      public getFTRProductNums_argsTupleScheme getScheme() {
        return new getFTRProductNums_argsTupleScheme();
      }
    }

    private static class getFTRProductNums_argsTupleScheme extends TupleScheme<getFTRProductNums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFTRProductNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIds()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityIds()) {
          {
            oprot.writeI32(struct.entityIds.size());
            for (String _iter120 : struct.entityIds)
            {
              oprot.writeString(_iter120);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFTRProductNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set121 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entityIds = new HashSet<String>(2*_set121.size);
            for (int _i122 = 0; _i122 < _set121.size; ++_i122)
            {
              String _elem123; // required
              _elem123 = iprot.readString();
              struct.entityIds.add(_elem123);
            }
          }
          struct.setEntityIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getFTRProductNums_result implements org.apache.thrift.TBase<getFTRProductNums_result, getFTRProductNums_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFTRProductNums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFTRProductNums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFTRProductNums_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFTRProductNums_result.class, metaDataMap);
    }

    public getFTRProductNums_result() {
    }

    public getFTRProductNums_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFTRProductNums_result(getFTRProductNums_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getFTRProductNums_result deepCopy() {
      return new getFTRProductNums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public getFTRProductNums_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFTRProductNums_result)
        return this.equals((getFTRProductNums_result)that);
      return false;
    }

    public boolean equals(getFTRProductNums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFTRProductNums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFTRProductNums_result typedOther = (getFTRProductNums_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFTRProductNums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFTRProductNums_resultStandardSchemeFactory implements SchemeFactory {
      public getFTRProductNums_resultStandardScheme getScheme() {
        return new getFTRProductNums_resultStandardScheme();
      }
    }

    private static class getFTRProductNums_resultStandardScheme extends StandardScheme<getFTRProductNums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFTRProductNums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map124.size);
                  for (int _i125 = 0; _i125 < _map124.size; ++_i125)
                  {
                    String _key126; // required
                    long _val127; // required
                    _key126 = iprot.readString();
                    _val127 = iprot.readI64();
                    struct.success.put(_key126, _val127);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFTRProductNums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter128 : struct.success.entrySet())
            {
              oprot.writeString(_iter128.getKey());
              oprot.writeI64(_iter128.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFTRProductNums_resultTupleSchemeFactory implements SchemeFactory {
      public getFTRProductNums_resultTupleScheme getScheme() {
        return new getFTRProductNums_resultTupleScheme();
      }
    }

    private static class getFTRProductNums_resultTupleScheme extends TupleScheme<getFTRProductNums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFTRProductNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter129 : struct.success.entrySet())
            {
              oprot.writeString(_iter129.getKey());
              oprot.writeI64(_iter129.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFTRProductNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map130 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map130.size);
            for (int _i131 = 0; _i131 < _map130.size; ++_i131)
            {
              String _key132; // required
              long _val133; // required
              _key132 = iprot.readString();
              _val133 = iprot.readI64();
              struct.success.put(_key132, _val133);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFailProductInspectNums_args implements org.apache.thrift.TBase<getFailProductInspectNums_args, getFailProductInspectNums_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFailProductInspectNums_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIds", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFailProductInspectNums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFailProductInspectNums_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Set<String> entityIds; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_IDS((short)2, "entityIds"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_IDS
            return ENTITY_IDS;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFailProductInspectNums_args.class, metaDataMap);
    }

    public getFailProductInspectNums_args() {
    }

    public getFailProductInspectNums_args(
      String accessKey,
      Set<String> entityIds,
      long startTime,
      long endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityIds = entityIds;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFailProductInspectNums_args(getFailProductInspectNums_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityIds()) {
        Set<String> __this__entityIds = new HashSet<String>();
        for (String other_element : other.entityIds) {
          __this__entityIds.add(other_element);
        }
        this.entityIds = __this__entityIds;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getFailProductInspectNums_args deepCopy() {
      return new getFailProductInspectNums_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityIds = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getFailProductInspectNums_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getEntityIdsSize() {
      return (this.entityIds == null) ? 0 : this.entityIds.size();
    }

    public java.util.Iterator<String> getEntityIdsIterator() {
      return (this.entityIds == null) ? null : this.entityIds.iterator();
    }

    public void addToEntityIds(String elem) {
      if (this.entityIds == null) {
        this.entityIds = new HashSet<String>();
      }
      this.entityIds.add(elem);
    }

    public Set<String> getEntityIds() {
      return this.entityIds;
    }

    public getFailProductInspectNums_args setEntityIds(Set<String> entityIds) {
      this.entityIds = entityIds;
      return this;
    }

    public void unsetEntityIds() {
      this.entityIds = null;
    }

    /** Returns true if field entityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIds() {
      return this.entityIds != null;
    }

    public void setEntityIdsIsSet(boolean value) {
      if (!value) {
        this.entityIds = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getFailProductInspectNums_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getFailProductInspectNums_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_IDS:
        if (value == null) {
          unsetEntityIds();
        } else {
          setEntityIds((Set<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_IDS:
        return getEntityIds();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_IDS:
        return isSetEntityIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFailProductInspectNums_args)
        return this.equals((getFailProductInspectNums_args)that);
      return false;
    }

    public boolean equals(getFailProductInspectNums_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityIds = true && this.isSetEntityIds();
      boolean that_present_entityIds = true && that.isSetEntityIds();
      if (this_present_entityIds || that_present_entityIds) {
        if (!(this_present_entityIds && that_present_entityIds))
          return false;
        if (!this.entityIds.equals(that.entityIds))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFailProductInspectNums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFailProductInspectNums_args typedOther = (getFailProductInspectNums_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIds()).compareTo(typedOther.isSetEntityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIds, typedOther.entityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFailProductInspectNums_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIds:");
      if (this.entityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFailProductInspectNums_argsStandardSchemeFactory implements SchemeFactory {
      public getFailProductInspectNums_argsStandardScheme getScheme() {
        return new getFailProductInspectNums_argsStandardScheme();
      }
    }

    private static class getFailProductInspectNums_argsStandardScheme extends StandardScheme<getFailProductInspectNums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFailProductInspectNums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set134 = iprot.readSetBegin();
                  struct.entityIds = new HashSet<String>(2*_set134.size);
                  for (int _i135 = 0; _i135 < _set134.size; ++_i135)
                  {
                    String _elem136; // required
                    _elem136 = iprot.readString();
                    struct.entityIds.add(_elem136);
                  }
                  iprot.readSetEnd();
                }
                struct.setEntityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFailProductInspectNums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityIds != null) {
          oprot.writeFieldBegin(ENTITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.entityIds.size()));
            for (String _iter137 : struct.entityIds)
            {
              oprot.writeString(_iter137);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFailProductInspectNums_argsTupleSchemeFactory implements SchemeFactory {
      public getFailProductInspectNums_argsTupleScheme getScheme() {
        return new getFailProductInspectNums_argsTupleScheme();
      }
    }

    private static class getFailProductInspectNums_argsTupleScheme extends TupleScheme<getFailProductInspectNums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFailProductInspectNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIds()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityIds()) {
          {
            oprot.writeI32(struct.entityIds.size());
            for (String _iter138 : struct.entityIds)
            {
              oprot.writeString(_iter138);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFailProductInspectNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set139 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entityIds = new HashSet<String>(2*_set139.size);
            for (int _i140 = 0; _i140 < _set139.size; ++_i140)
            {
              String _elem141; // required
              _elem141 = iprot.readString();
              struct.entityIds.add(_elem141);
            }
          }
          struct.setEntityIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getFailProductInspectNums_result implements org.apache.thrift.TBase<getFailProductInspectNums_result, getFailProductInspectNums_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFailProductInspectNums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFailProductInspectNums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFailProductInspectNums_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFailProductInspectNums_result.class, metaDataMap);
    }

    public getFailProductInspectNums_result() {
    }

    public getFailProductInspectNums_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFailProductInspectNums_result(getFailProductInspectNums_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getFailProductInspectNums_result deepCopy() {
      return new getFailProductInspectNums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public getFailProductInspectNums_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFailProductInspectNums_result)
        return this.equals((getFailProductInspectNums_result)that);
      return false;
    }

    public boolean equals(getFailProductInspectNums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFailProductInspectNums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFailProductInspectNums_result typedOther = (getFailProductInspectNums_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFailProductInspectNums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFailProductInspectNums_resultStandardSchemeFactory implements SchemeFactory {
      public getFailProductInspectNums_resultStandardScheme getScheme() {
        return new getFailProductInspectNums_resultStandardScheme();
      }
    }

    private static class getFailProductInspectNums_resultStandardScheme extends StandardScheme<getFailProductInspectNums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFailProductInspectNums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map142.size);
                  for (int _i143 = 0; _i143 < _map142.size; ++_i143)
                  {
                    String _key144; // required
                    long _val145; // required
                    _key144 = iprot.readString();
                    _val145 = iprot.readI64();
                    struct.success.put(_key144, _val145);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFailProductInspectNums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter146 : struct.success.entrySet())
            {
              oprot.writeString(_iter146.getKey());
              oprot.writeI64(_iter146.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFailProductInspectNums_resultTupleSchemeFactory implements SchemeFactory {
      public getFailProductInspectNums_resultTupleScheme getScheme() {
        return new getFailProductInspectNums_resultTupleScheme();
      }
    }

    private static class getFailProductInspectNums_resultTupleScheme extends TupleScheme<getFailProductInspectNums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFailProductInspectNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter147 : struct.success.entrySet())
            {
              oprot.writeString(_iter147.getKey());
              oprot.writeI64(_iter147.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFailProductInspectNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map148 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map148.size);
            for (int _i149 = 0; _i149 < _map148.size; ++_i149)
            {
              String _key150; // required
              long _val151; // required
              _key150 = iprot.readString();
              _val151 = iprot.readI64();
              struct.success.put(_key150, _val151);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductOutputNums_args implements org.apache.thrift.TBase<getProductOutputNums_args, getProductOutputNums_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOutputNums_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIds", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOutputNums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOutputNums_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Set<String> entityIds; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_IDS((short)2, "entityIds"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_IDS
            return ENTITY_IDS;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOutputNums_args.class, metaDataMap);
    }

    public getProductOutputNums_args() {
    }

    public getProductOutputNums_args(
      String accessKey,
      Set<String> entityIds,
      long startTime,
      long endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityIds = entityIds;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOutputNums_args(getProductOutputNums_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityIds()) {
        Set<String> __this__entityIds = new HashSet<String>();
        for (String other_element : other.entityIds) {
          __this__entityIds.add(other_element);
        }
        this.entityIds = __this__entityIds;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getProductOutputNums_args deepCopy() {
      return new getProductOutputNums_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityIds = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getProductOutputNums_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getEntityIdsSize() {
      return (this.entityIds == null) ? 0 : this.entityIds.size();
    }

    public java.util.Iterator<String> getEntityIdsIterator() {
      return (this.entityIds == null) ? null : this.entityIds.iterator();
    }

    public void addToEntityIds(String elem) {
      if (this.entityIds == null) {
        this.entityIds = new HashSet<String>();
      }
      this.entityIds.add(elem);
    }

    public Set<String> getEntityIds() {
      return this.entityIds;
    }

    public getProductOutputNums_args setEntityIds(Set<String> entityIds) {
      this.entityIds = entityIds;
      return this;
    }

    public void unsetEntityIds() {
      this.entityIds = null;
    }

    /** Returns true if field entityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIds() {
      return this.entityIds != null;
    }

    public void setEntityIdsIsSet(boolean value) {
      if (!value) {
        this.entityIds = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getProductOutputNums_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getProductOutputNums_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_IDS:
        if (value == null) {
          unsetEntityIds();
        } else {
          setEntityIds((Set<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_IDS:
        return getEntityIds();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_IDS:
        return isSetEntityIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOutputNums_args)
        return this.equals((getProductOutputNums_args)that);
      return false;
    }

    public boolean equals(getProductOutputNums_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityIds = true && this.isSetEntityIds();
      boolean that_present_entityIds = true && that.isSetEntityIds();
      if (this_present_entityIds || that_present_entityIds) {
        if (!(this_present_entityIds && that_present_entityIds))
          return false;
        if (!this.entityIds.equals(that.entityIds))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductOutputNums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductOutputNums_args typedOther = (getProductOutputNums_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIds()).compareTo(typedOther.isSetEntityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIds, typedOther.entityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOutputNums_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIds:");
      if (this.entityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOutputNums_argsStandardSchemeFactory implements SchemeFactory {
      public getProductOutputNums_argsStandardScheme getScheme() {
        return new getProductOutputNums_argsStandardScheme();
      }
    }

    private static class getProductOutputNums_argsStandardScheme extends StandardScheme<getProductOutputNums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOutputNums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set152 = iprot.readSetBegin();
                  struct.entityIds = new HashSet<String>(2*_set152.size);
                  for (int _i153 = 0; _i153 < _set152.size; ++_i153)
                  {
                    String _elem154; // required
                    _elem154 = iprot.readString();
                    struct.entityIds.add(_elem154);
                  }
                  iprot.readSetEnd();
                }
                struct.setEntityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOutputNums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityIds != null) {
          oprot.writeFieldBegin(ENTITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.entityIds.size()));
            for (String _iter155 : struct.entityIds)
            {
              oprot.writeString(_iter155);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOutputNums_argsTupleSchemeFactory implements SchemeFactory {
      public getProductOutputNums_argsTupleScheme getScheme() {
        return new getProductOutputNums_argsTupleScheme();
      }
    }

    private static class getProductOutputNums_argsTupleScheme extends TupleScheme<getProductOutputNums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOutputNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIds()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityIds()) {
          {
            oprot.writeI32(struct.entityIds.size());
            for (String _iter156 : struct.entityIds)
            {
              oprot.writeString(_iter156);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOutputNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set157 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entityIds = new HashSet<String>(2*_set157.size);
            for (int _i158 = 0; _i158 < _set157.size; ++_i158)
            {
              String _elem159; // required
              _elem159 = iprot.readString();
              struct.entityIds.add(_elem159);
            }
          }
          struct.setEntityIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getProductOutputNums_result implements org.apache.thrift.TBase<getProductOutputNums_result, getProductOutputNums_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOutputNums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOutputNums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOutputNums_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOutputNums_result.class, metaDataMap);
    }

    public getProductOutputNums_result() {
    }

    public getProductOutputNums_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOutputNums_result(getProductOutputNums_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getProductOutputNums_result deepCopy() {
      return new getProductOutputNums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public getProductOutputNums_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOutputNums_result)
        return this.equals((getProductOutputNums_result)that);
      return false;
    }

    public boolean equals(getProductOutputNums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductOutputNums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductOutputNums_result typedOther = (getProductOutputNums_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOutputNums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOutputNums_resultStandardSchemeFactory implements SchemeFactory {
      public getProductOutputNums_resultStandardScheme getScheme() {
        return new getProductOutputNums_resultStandardScheme();
      }
    }

    private static class getProductOutputNums_resultStandardScheme extends StandardScheme<getProductOutputNums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOutputNums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map160.size);
                  for (int _i161 = 0; _i161 < _map160.size; ++_i161)
                  {
                    String _key162; // required
                    long _val163; // required
                    _key162 = iprot.readString();
                    _val163 = iprot.readI64();
                    struct.success.put(_key162, _val163);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOutputNums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter164 : struct.success.entrySet())
            {
              oprot.writeString(_iter164.getKey());
              oprot.writeI64(_iter164.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOutputNums_resultTupleSchemeFactory implements SchemeFactory {
      public getProductOutputNums_resultTupleScheme getScheme() {
        return new getProductOutputNums_resultTupleScheme();
      }
    }

    private static class getProductOutputNums_resultTupleScheme extends TupleScheme<getProductOutputNums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOutputNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter165 : struct.success.entrySet())
            {
              oprot.writeString(_iter165.getKey());
              oprot.writeI64(_iter165.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOutputNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map166.size);
            for (int _i167 = 0; _i167 < _map166.size; ++_i167)
            {
              String _key168; // required
              long _val169; // required
              _key168 = iprot.readString();
              _val169 = iprot.readI64();
              struct.success.put(_key168, _val169);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductOutputNumsByPartId_args implements org.apache.thrift.TBase<getProductOutputNumsByPartId_args, getProductOutputNumsByPartId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOutputNumsByPartId_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOutputNumsByPartId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOutputNumsByPartId_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String entityId; // required
    public String partId; // required
    public String startTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_ID((short)2, "entityId"),
      PART_ID((short)3, "partId"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_ID
            return ENTITY_ID;
          case 3: // PART_ID
            return PART_ID;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PART_ID, new org.apache.thrift.meta_data.FieldMetaData("partId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOutputNumsByPartId_args.class, metaDataMap);
    }

    public getProductOutputNumsByPartId_args() {
    }

    public getProductOutputNumsByPartId_args(
      String accessKey,
      String entityId,
      String partId,
      String startTime,
      String endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityId = entityId;
      this.partId = partId;
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOutputNumsByPartId_args(getProductOutputNumsByPartId_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityId()) {
        this.entityId = other.entityId;
      }
      if (other.isSetPartId()) {
        this.partId = other.partId;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public getProductOutputNumsByPartId_args deepCopy() {
      return new getProductOutputNumsByPartId_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityId = null;
      this.partId = null;
      this.startTime = null;
      this.endTime = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getProductOutputNumsByPartId_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getEntityId() {
      return this.entityId;
    }

    public getProductOutputNumsByPartId_args setEntityId(String entityId) {
      this.entityId = entityId;
      return this;
    }

    public void unsetEntityId() {
      this.entityId = null;
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return this.entityId != null;
    }

    public void setEntityIdIsSet(boolean value) {
      if (!value) {
        this.entityId = null;
      }
    }

    public String getPartId() {
      return this.partId;
    }

    public getProductOutputNumsByPartId_args setPartId(String partId) {
      this.partId = partId;
      return this;
    }

    public void unsetPartId() {
      this.partId = null;
    }

    /** Returns true if field partId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartId() {
      return this.partId != null;
    }

    public void setPartIdIsSet(boolean value) {
      if (!value) {
        this.partId = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public getProductOutputNumsByPartId_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getProductOutputNumsByPartId_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((String)value);
        }
        break;

      case PART_ID:
        if (value == null) {
          unsetPartId();
        } else {
          setPartId((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_ID:
        return getEntityId();

      case PART_ID:
        return getPartId();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_ID:
        return isSetEntityId();
      case PART_ID:
        return isSetPartId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOutputNumsByPartId_args)
        return this.equals((getProductOutputNumsByPartId_args)that);
      return false;
    }

    public boolean equals(getProductOutputNumsByPartId_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityId = true && this.isSetEntityId();
      boolean that_present_entityId = true && that.isSetEntityId();
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (!this.entityId.equals(that.entityId))
          return false;
      }

      boolean this_present_partId = true && this.isSetPartId();
      boolean that_present_partId = true && that.isSetPartId();
      if (this_present_partId || that_present_partId) {
        if (!(this_present_partId && that_present_partId))
          return false;
        if (!this.partId.equals(that.partId))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductOutputNumsByPartId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductOutputNumsByPartId_args typedOther = (getProductOutputNumsByPartId_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(typedOther.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, typedOther.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartId()).compareTo(typedOther.isSetPartId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partId, typedOther.partId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumsByPartId_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityId:");
      if (this.entityId == null) {
        sb.append("null");
      } else {
        sb.append(this.entityId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partId:");
      if (this.partId == null) {
        sb.append("null");
      } else {
        sb.append(this.partId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOutputNumsByPartId_argsStandardSchemeFactory implements SchemeFactory {
      public getProductOutputNumsByPartId_argsStandardScheme getScheme() {
        return new getProductOutputNumsByPartId_argsStandardScheme();
      }
    }

    private static class getProductOutputNumsByPartId_argsStandardScheme extends StandardScheme<getProductOutputNumsByPartId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOutputNumsByPartId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entityId = iprot.readString();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PART_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partId = iprot.readString();
                struct.setPartIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOutputNumsByPartId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityId != null) {
          oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
          oprot.writeString(struct.entityId);
          oprot.writeFieldEnd();
        }
        if (struct.partId != null) {
          oprot.writeFieldBegin(PART_ID_FIELD_DESC);
          oprot.writeString(struct.partId);
          oprot.writeFieldEnd();
        }
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOutputNumsByPartId_argsTupleSchemeFactory implements SchemeFactory {
      public getProductOutputNumsByPartId_argsTupleScheme getScheme() {
        return new getProductOutputNumsByPartId_argsTupleScheme();
      }
    }

    private static class getProductOutputNumsByPartId_argsTupleScheme extends TupleScheme<getProductOutputNumsByPartId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumsByPartId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityId()) {
          optionals.set(1);
        }
        if (struct.isSetPartId()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityId()) {
          oprot.writeString(struct.entityId);
        }
        if (struct.isSetPartId()) {
          oprot.writeString(struct.partId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumsByPartId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityId = iprot.readString();
          struct.setEntityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partId = iprot.readString();
          struct.setPartIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getProductOutputNumsByPartId_result implements org.apache.thrift.TBase<getProductOutputNumsByPartId_result, getProductOutputNumsByPartId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOutputNumsByPartId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOutputNumsByPartId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOutputNumsByPartId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOutputNumsByPartId_result.class, metaDataMap);
    }

    public getProductOutputNumsByPartId_result() {
    }

    public getProductOutputNumsByPartId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOutputNumsByPartId_result(getProductOutputNumsByPartId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getProductOutputNumsByPartId_result deepCopy() {
      return new getProductOutputNumsByPartId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getProductOutputNumsByPartId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOutputNumsByPartId_result)
        return this.equals((getProductOutputNumsByPartId_result)that);
      return false;
    }

    public boolean equals(getProductOutputNumsByPartId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductOutputNumsByPartId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductOutputNumsByPartId_result typedOther = (getProductOutputNumsByPartId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumsByPartId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOutputNumsByPartId_resultStandardSchemeFactory implements SchemeFactory {
      public getProductOutputNumsByPartId_resultStandardScheme getScheme() {
        return new getProductOutputNumsByPartId_resultStandardScheme();
      }
    }

    private static class getProductOutputNumsByPartId_resultStandardScheme extends StandardScheme<getProductOutputNumsByPartId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOutputNumsByPartId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOutputNumsByPartId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOutputNumsByPartId_resultTupleSchemeFactory implements SchemeFactory {
      public getProductOutputNumsByPartId_resultTupleScheme getScheme() {
        return new getProductOutputNumsByPartId_resultTupleScheme();
      }
    }

    private static class getProductOutputNumsByPartId_resultTupleScheme extends TupleScheme<getProductOutputNumsByPartId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumsByPartId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumsByPartId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOnJobTotalTimes_args implements org.apache.thrift.TBase<getOnJobTotalTimes_args, getOnJobTotalTimes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnJobTotalTimes_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIds", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnJobTotalTimes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnJobTotalTimes_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public Set<String> entityIds; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_IDS((short)2, "entityIds"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_IDS
            return ENTITY_IDS;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnJobTotalTimes_args.class, metaDataMap);
    }

    public getOnJobTotalTimes_args() {
    }

    public getOnJobTotalTimes_args(
      String accessKey,
      Set<String> entityIds,
      long startTime,
      long endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityIds = entityIds;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnJobTotalTimes_args(getOnJobTotalTimes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityIds()) {
        Set<String> __this__entityIds = new HashSet<String>();
        for (String other_element : other.entityIds) {
          __this__entityIds.add(other_element);
        }
        this.entityIds = __this__entityIds;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getOnJobTotalTimes_args deepCopy() {
      return new getOnJobTotalTimes_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityIds = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getOnJobTotalTimes_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public int getEntityIdsSize() {
      return (this.entityIds == null) ? 0 : this.entityIds.size();
    }

    public java.util.Iterator<String> getEntityIdsIterator() {
      return (this.entityIds == null) ? null : this.entityIds.iterator();
    }

    public void addToEntityIds(String elem) {
      if (this.entityIds == null) {
        this.entityIds = new HashSet<String>();
      }
      this.entityIds.add(elem);
    }

    public Set<String> getEntityIds() {
      return this.entityIds;
    }

    public getOnJobTotalTimes_args setEntityIds(Set<String> entityIds) {
      this.entityIds = entityIds;
      return this;
    }

    public void unsetEntityIds() {
      this.entityIds = null;
    }

    /** Returns true if field entityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIds() {
      return this.entityIds != null;
    }

    public void setEntityIdsIsSet(boolean value) {
      if (!value) {
        this.entityIds = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getOnJobTotalTimes_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getOnJobTotalTimes_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_IDS:
        if (value == null) {
          unsetEntityIds();
        } else {
          setEntityIds((Set<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_IDS:
        return getEntityIds();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_IDS:
        return isSetEntityIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnJobTotalTimes_args)
        return this.equals((getOnJobTotalTimes_args)that);
      return false;
    }

    public boolean equals(getOnJobTotalTimes_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityIds = true && this.isSetEntityIds();
      boolean that_present_entityIds = true && that.isSetEntityIds();
      if (this_present_entityIds || that_present_entityIds) {
        if (!(this_present_entityIds && that_present_entityIds))
          return false;
        if (!this.entityIds.equals(that.entityIds))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOnJobTotalTimes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOnJobTotalTimes_args typedOther = (getOnJobTotalTimes_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIds()).compareTo(typedOther.isSetEntityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIds, typedOther.entityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnJobTotalTimes_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIds:");
      if (this.entityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnJobTotalTimes_argsStandardSchemeFactory implements SchemeFactory {
      public getOnJobTotalTimes_argsStandardScheme getScheme() {
        return new getOnJobTotalTimes_argsStandardScheme();
      }
    }

    private static class getOnJobTotalTimes_argsStandardScheme extends StandardScheme<getOnJobTotalTimes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnJobTotalTimes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set170 = iprot.readSetBegin();
                  struct.entityIds = new HashSet<String>(2*_set170.size);
                  for (int _i171 = 0; _i171 < _set170.size; ++_i171)
                  {
                    String _elem172; // required
                    _elem172 = iprot.readString();
                    struct.entityIds.add(_elem172);
                  }
                  iprot.readSetEnd();
                }
                struct.setEntityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnJobTotalTimes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityIds != null) {
          oprot.writeFieldBegin(ENTITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.entityIds.size()));
            for (String _iter173 : struct.entityIds)
            {
              oprot.writeString(_iter173);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnJobTotalTimes_argsTupleSchemeFactory implements SchemeFactory {
      public getOnJobTotalTimes_argsTupleScheme getScheme() {
        return new getOnJobTotalTimes_argsTupleScheme();
      }
    }

    private static class getOnJobTotalTimes_argsTupleScheme extends TupleScheme<getOnJobTotalTimes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnJobTotalTimes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIds()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityIds()) {
          {
            oprot.writeI32(struct.entityIds.size());
            for (String _iter174 : struct.entityIds)
            {
              oprot.writeString(_iter174);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnJobTotalTimes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set175 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entityIds = new HashSet<String>(2*_set175.size);
            for (int _i176 = 0; _i176 < _set175.size; ++_i176)
            {
              String _elem177; // required
              _elem177 = iprot.readString();
              struct.entityIds.add(_elem177);
            }
          }
          struct.setEntityIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getOnJobTotalTimes_result implements org.apache.thrift.TBase<getOnJobTotalTimes_result, getOnJobTotalTimes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnJobTotalTimes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnJobTotalTimes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnJobTotalTimes_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnJobTotalTimes_result.class, metaDataMap);
    }

    public getOnJobTotalTimes_result() {
    }

    public getOnJobTotalTimes_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnJobTotalTimes_result(getOnJobTotalTimes_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getOnJobTotalTimes_result deepCopy() {
      return new getOnJobTotalTimes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public getOnJobTotalTimes_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnJobTotalTimes_result)
        return this.equals((getOnJobTotalTimes_result)that);
      return false;
    }

    public boolean equals(getOnJobTotalTimes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOnJobTotalTimes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOnJobTotalTimes_result typedOther = (getOnJobTotalTimes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnJobTotalTimes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnJobTotalTimes_resultStandardSchemeFactory implements SchemeFactory {
      public getOnJobTotalTimes_resultStandardScheme getScheme() {
        return new getOnJobTotalTimes_resultStandardScheme();
      }
    }

    private static class getOnJobTotalTimes_resultStandardScheme extends StandardScheme<getOnJobTotalTimes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnJobTotalTimes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map178.size);
                  for (int _i179 = 0; _i179 < _map178.size; ++_i179)
                  {
                    String _key180; // required
                    long _val181; // required
                    _key180 = iprot.readString();
                    _val181 = iprot.readI64();
                    struct.success.put(_key180, _val181);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnJobTotalTimes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter182 : struct.success.entrySet())
            {
              oprot.writeString(_iter182.getKey());
              oprot.writeI64(_iter182.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnJobTotalTimes_resultTupleSchemeFactory implements SchemeFactory {
      public getOnJobTotalTimes_resultTupleScheme getScheme() {
        return new getOnJobTotalTimes_resultTupleScheme();
      }
    }

    private static class getOnJobTotalTimes_resultTupleScheme extends TupleScheme<getOnJobTotalTimes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnJobTotalTimes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter183 : struct.success.entrySet())
            {
              oprot.writeString(_iter183.getKey());
              oprot.writeI64(_iter183.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnJobTotalTimes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map184.size);
            for (int _i185 = 0; _i185 < _map184.size; ++_i185)
            {
              String _key186; // required
              long _val187; // required
              _key186 = iprot.readString();
              _val187 = iprot.readI64();
              struct.success.put(_key186, _val187);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductOutputNumAndTime_args implements org.apache.thrift.TBase<getProductOutputNumAndTime_args, getProductOutputNumAndTime_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOutputNumAndTime_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOutputNumAndTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOutputNumAndTime_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String entityId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      ENTITY_ID((short)2, "entityId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // ENTITY_ID
            return ENTITY_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOutputNumAndTime_args.class, metaDataMap);
    }

    public getProductOutputNumAndTime_args() {
    }

    public getProductOutputNumAndTime_args(
      String accessKey,
      String entityId,
      long startTime,
      long endTime)
    {
      this();
      this.accessKey = accessKey;
      this.entityId = entityId;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOutputNumAndTime_args(getProductOutputNumAndTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetEntityId()) {
        this.entityId = other.entityId;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getProductOutputNumAndTime_args deepCopy() {
      return new getProductOutputNumAndTime_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.entityId = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public getProductOutputNumAndTime_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getEntityId() {
      return this.entityId;
    }

    public getProductOutputNumAndTime_args setEntityId(String entityId) {
      this.entityId = entityId;
      return this;
    }

    public void unsetEntityId() {
      this.entityId = null;
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return this.entityId != null;
    }

    public void setEntityIdIsSet(boolean value) {
      if (!value) {
        this.entityId = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getProductOutputNumAndTime_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getProductOutputNumAndTime_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case ENTITY_ID:
        return getEntityId();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case ENTITY_ID:
        return isSetEntityId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOutputNumAndTime_args)
        return this.equals((getProductOutputNumAndTime_args)that);
      return false;
    }

    public boolean equals(getProductOutputNumAndTime_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_entityId = true && this.isSetEntityId();
      boolean that_present_entityId = true && that.isSetEntityId();
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (!this.entityId.equals(that.entityId))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductOutputNumAndTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductOutputNumAndTime_args typedOther = (getProductOutputNumAndTime_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(typedOther.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, typedOther.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumAndTime_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityId:");
      if (this.entityId == null) {
        sb.append("null");
      } else {
        sb.append(this.entityId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOutputNumAndTime_argsStandardSchemeFactory implements SchemeFactory {
      public getProductOutputNumAndTime_argsStandardScheme getScheme() {
        return new getProductOutputNumAndTime_argsStandardScheme();
      }
    }

    private static class getProductOutputNumAndTime_argsStandardScheme extends StandardScheme<getProductOutputNumAndTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOutputNumAndTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entityId = iprot.readString();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOutputNumAndTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.entityId != null) {
          oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
          oprot.writeString(struct.entityId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOutputNumAndTime_argsTupleSchemeFactory implements SchemeFactory {
      public getProductOutputNumAndTime_argsTupleScheme getScheme() {
        return new getProductOutputNumAndTime_argsTupleScheme();
      }
    }

    private static class getProductOutputNumAndTime_argsTupleScheme extends TupleScheme<getProductOutputNumAndTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumAndTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetEntityId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetEntityId()) {
          oprot.writeString(struct.entityId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumAndTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityId = iprot.readString();
          struct.setEntityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getProductOutputNumAndTime_result implements org.apache.thrift.TBase<getProductOutputNumAndTime_result, getProductOutputNumAndTime_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOutputNumAndTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOutputNumAndTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOutputNumAndTime_resultTupleSchemeFactory());
    }

    public Set<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOutputNumAndTime_result.class, metaDataMap);
    }

    public getProductOutputNumAndTime_result() {
    }

    public getProductOutputNumAndTime_result(
      Set<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOutputNumAndTime_result(getProductOutputNumAndTime_result other) {
      if (other.isSetSuccess()) {
        Set<Map<String,String>> __this__success = new HashSet<Map<String,String>>();
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>();
          for (Map.Entry<String, String> other_element_element : other_element.entrySet()) {

            String other_element_element_key = other_element_element.getKey();
            String other_element_element_value = other_element_element.getValue();

            String __this__success_copy_copy_key = other_element_element_key;

            String __this__success_copy_copy_value = other_element_element_value;

            __this__success_copy.put(__this__success_copy_copy_key, __this__success_copy_copy_value);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getProductOutputNumAndTime_result deepCopy() {
      return new getProductOutputNumAndTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new HashSet<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public Set<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getProductOutputNumAndTime_result setSuccess(Set<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOutputNumAndTime_result)
        return this.equals((getProductOutputNumAndTime_result)that);
      return false;
    }

    public boolean equals(getProductOutputNumAndTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductOutputNumAndTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductOutputNumAndTime_result typedOther = (getProductOutputNumAndTime_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumAndTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOutputNumAndTime_resultStandardSchemeFactory implements SchemeFactory {
      public getProductOutputNumAndTime_resultStandardScheme getScheme() {
        return new getProductOutputNumAndTime_resultStandardScheme();
      }
    }

    private static class getProductOutputNumAndTime_resultStandardScheme extends StandardScheme<getProductOutputNumAndTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOutputNumAndTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set188 = iprot.readSetBegin();
                  struct.success = new HashSet<Map<String,String>>(2*_set188.size);
                  for (int _i189 = 0; _i189 < _set188.size; ++_i189)
                  {
                    Map<String,String> _elem190; // required
                    {
                      org.apache.thrift.protocol.TMap _map191 = iprot.readMapBegin();
                      _elem190 = new HashMap<String,String>(2*_map191.size);
                      for (int _i192 = 0; _i192 < _map191.size; ++_i192)
                      {
                        String _key193; // required
                        String _val194; // required
                        _key193 = iprot.readString();
                        _val194 = iprot.readString();
                        _elem190.put(_key193, _val194);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem190);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOutputNumAndTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter195 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter195.size()));
                for (Map.Entry<String, String> _iter196 : _iter195.entrySet())
                {
                  oprot.writeString(_iter196.getKey());
                  oprot.writeString(_iter196.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOutputNumAndTime_resultTupleSchemeFactory implements SchemeFactory {
      public getProductOutputNumAndTime_resultTupleScheme getScheme() {
        return new getProductOutputNumAndTime_resultTupleScheme();
      }
    }

    private static class getProductOutputNumAndTime_resultTupleScheme extends TupleScheme<getProductOutputNumAndTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumAndTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter197 : struct.success)
            {
              {
                oprot.writeI32(_iter197.size());
                for (Map.Entry<String, String> _iter198 : _iter197.entrySet())
                {
                  oprot.writeString(_iter198.getKey());
                  oprot.writeString(_iter198.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOutputNumAndTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set199 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashSet<Map<String,String>>(2*_set199.size);
            for (int _i200 = 0; _i200 < _set199.size; ++_i200)
            {
              Map<String,String> _elem201; // required
              {
                org.apache.thrift.protocol.TMap _map202 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem201 = new HashMap<String,String>(2*_map202.size);
                for (int _i203 = 0; _i203 < _map202.size; ++_i203)
                {
                  String _key204; // required
                  String _val205; // required
                  _key204 = iprot.readString();
                  _val205 = iprot.readString();
                  _elem201.put(_key204, _val205);
                }
              }
              struct.success.add(_elem201);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
