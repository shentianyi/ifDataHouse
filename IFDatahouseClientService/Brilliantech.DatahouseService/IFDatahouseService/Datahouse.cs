/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class Datahouse {
  public interface Iface {
    /// <summary>
    /// add attendance
    /// entityId,attendTime,staffId,type are required
    /// type: -1:off,1:on
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    void addAttendance(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_addAttendance(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    void End_addAttendance(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// add product inspect
    /// entityId,inspectTime,productNr,type are required
    /// type 0:fail,1:pass
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    void addProductInspect(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_addProductInspect(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    void End_addProductInspect(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// add out put
    /// entityId,packTime,productNr,partId are required
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    void addProductPack(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_addProductPack(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    void End_addProductPack(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// set product inspect
    /// entityId,inspectTime,productNr,type are required
    /// type 0:fail,1:pass
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    void setProductInspectState(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_setProductInspectState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    void End_setProductInspectState(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// add entity operation record
    /// entityId,operateTime,state are required
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    void addOperatingState(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_addOperatingState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    void End_addOperatingState(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// add target
    /// entityId,partId are required
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    void addPlanTarget(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_addPlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    void End_addPlanTarget(IAsyncResult asyncResult);
    #endif
    Dictionary<string, string> getPlanTarget(string accessKey, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_getPlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
    Dictionary<string, string> End_getPlanTarget(IAsyncResult asyncResult);
    #endif
    void updatePlanTarget(string accessKey, Dictionary<string, string> query, Dictionary<string, string> dataMap);
    #if SILVERLIGHT
    IAsyncResult Begin_updatePlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> query, Dictionary<string, string> dataMap);
    void End_updatePlanTarget(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get current on job workers number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    Dictionary<string, long> getCurrentOnJobWorkerNums(string accessKey, THashSet<string> entityIds);
    #if SILVERLIGHT
    IAsyncResult Begin_getCurrentOnJobWorkerNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds);
    Dictionary<string, long> End_getCurrentOnJobWorkerNums(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get out put number
    /// date in format of 20130101
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    Dictionary<string, long> getOriProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getOriProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    Dictionary<string, long> End_getOriProductOutputNums(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get product inspect first time right number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    Dictionary<string, long> getFTRProductNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getFTRProductNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    Dictionary<string, long> End_getFTRProductNums(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get product inspect faild number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    Dictionary<string, long> getFailProductInspectNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getFailProductInspectNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    Dictionary<string, long> End_getFailProductInspectNums(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get product number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    Dictionary<string, long> getProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    Dictionary<string, long> End_getProductOutputNums(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get product number by partId,entityId
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityId"></param>
    /// <param name="partId"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    long getProductOutputNumsByPartId(string accessKey, string entityId, string partId, string startTime, string endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getProductOutputNumsByPartId(AsyncCallback callback, object state, string accessKey, string entityId, string partId, string startTime, string endTime);
    long End_getProductOutputNumsByPartId(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get entity workers on job time
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    Dictionary<string, long> getOnJobTotalTimes(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getOnJobTotalTimes(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
    Dictionary<string, long> End_getOnJobTotalTimes(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// get entity part num and produce-time
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityId"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    THashSet<Dictionary<string, string>> getProductOutputNumAndTime(string accessKey, string entityId, long startTime, long endTime);
    #if SILVERLIGHT
    IAsyncResult Begin_getProductOutputNumAndTime(AsyncCallback callback, object state, string accessKey, string entityId, long startTime, long endTime);
    THashSet<Dictionary<string, string>> End_getProductOutputNumAndTime(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_addAttendance(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_addAttendance(callback, state, accessKey, dataMap);
    }

    public void End_addAttendance(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addAttendance();
    }

    #endif

    /// <summary>
    /// add attendance
    /// entityId,attendTime,staffId,type are required
    /// type: -1:off,1:on
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    public void addAttendance(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_addAttendance(accessKey, dataMap);
      recv_addAttendance();

      #else
      var asyncResult = Begin_addAttendance(null, null, accessKey, dataMap);
      End_addAttendance(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addAttendance(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_addAttendance(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addAttendance", TMessageType.Call, seqid_));
      addAttendance_args args = new addAttendance_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_addAttendance()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addAttendance_result result = new addAttendance_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addProductInspect(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_addProductInspect(callback, state, accessKey, dataMap);
    }

    public void End_addProductInspect(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addProductInspect();
    }

    #endif

    /// <summary>
    /// add product inspect
    /// entityId,inspectTime,productNr,type are required
    /// type 0:fail,1:pass
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    public void addProductInspect(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_addProductInspect(accessKey, dataMap);
      recv_addProductInspect();

      #else
      var asyncResult = Begin_addProductInspect(null, null, accessKey, dataMap);
      End_addProductInspect(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addProductInspect(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_addProductInspect(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addProductInspect", TMessageType.Call, seqid_));
      addProductInspect_args args = new addProductInspect_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_addProductInspect()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addProductInspect_result result = new addProductInspect_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addProductPack(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_addProductPack(callback, state, accessKey, dataMap);
    }

    public void End_addProductPack(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addProductPack();
    }

    #endif

    /// <summary>
    /// add out put
    /// entityId,packTime,productNr,partId are required
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    public void addProductPack(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_addProductPack(accessKey, dataMap);
      recv_addProductPack();

      #else
      var asyncResult = Begin_addProductPack(null, null, accessKey, dataMap);
      End_addProductPack(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addProductPack(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_addProductPack(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addProductPack", TMessageType.Call, seqid_));
      addProductPack_args args = new addProductPack_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_addProductPack()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addProductPack_result result = new addProductPack_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_setProductInspectState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_setProductInspectState(callback, state, accessKey, dataMap);
    }

    public void End_setProductInspectState(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setProductInspectState();
    }

    #endif

    /// <summary>
    /// set product inspect
    /// entityId,inspectTime,productNr,type are required
    /// type 0:fail,1:pass
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    public void setProductInspectState(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_setProductInspectState(accessKey, dataMap);
      recv_setProductInspectState();

      #else
      var asyncResult = Begin_setProductInspectState(null, null, accessKey, dataMap);
      End_setProductInspectState(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setProductInspectState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_setProductInspectState(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("setProductInspectState", TMessageType.Call, seqid_));
      setProductInspectState_args args = new setProductInspectState_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_setProductInspectState()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setProductInspectState_result result = new setProductInspectState_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addOperatingState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_addOperatingState(callback, state, accessKey, dataMap);
    }

    public void End_addOperatingState(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addOperatingState();
    }

    #endif

    /// <summary>
    /// add entity operation record
    /// entityId,operateTime,state are required
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    public void addOperatingState(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_addOperatingState(accessKey, dataMap);
      recv_addOperatingState();

      #else
      var asyncResult = Begin_addOperatingState(null, null, accessKey, dataMap);
      End_addOperatingState(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addOperatingState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_addOperatingState(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addOperatingState", TMessageType.Call, seqid_));
      addOperatingState_args args = new addOperatingState_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_addOperatingState()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addOperatingState_result result = new addOperatingState_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addPlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_addPlanTarget(callback, state, accessKey, dataMap);
    }

    public void End_addPlanTarget(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addPlanTarget();
    }

    #endif

    /// <summary>
    /// add target
    /// entityId,partId are required
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="dataMap"></param>
    public void addPlanTarget(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_addPlanTarget(accessKey, dataMap);
      recv_addPlanTarget();

      #else
      var asyncResult = Begin_addPlanTarget(null, null, accessKey, dataMap);
      End_addPlanTarget(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addPlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_addPlanTarget(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addPlanTarget", TMessageType.Call, seqid_));
      addPlanTarget_args args = new addPlanTarget_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_addPlanTarget()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addPlanTarget_result result = new addPlanTarget_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    {
      return send_getPlanTarget(callback, state, accessKey, dataMap);
    }

    public Dictionary<string, string> End_getPlanTarget(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPlanTarget();
    }

    #endif

    public Dictionary<string, string> getPlanTarget(string accessKey, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_getPlanTarget(accessKey, dataMap);
      return recv_getPlanTarget();

      #else
      var asyncResult = Begin_getPlanTarget(null, null, accessKey, dataMap);
      return End_getPlanTarget(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
    #else
    public void send_getPlanTarget(string accessKey, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPlanTarget", TMessageType.Call, seqid_));
      getPlanTarget_args args = new getPlanTarget_args();
      args.AccessKey = accessKey;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, string> recv_getPlanTarget()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPlanTarget_result result = new getPlanTarget_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPlanTarget failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updatePlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> query, Dictionary<string, string> dataMap)
    {
      return send_updatePlanTarget(callback, state, accessKey, query, dataMap);
    }

    public void End_updatePlanTarget(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updatePlanTarget();
    }

    #endif

    public void updatePlanTarget(string accessKey, Dictionary<string, string> query, Dictionary<string, string> dataMap)
    {
      #if !SILVERLIGHT
      send_updatePlanTarget(accessKey, query, dataMap);
      recv_updatePlanTarget();

      #else
      var asyncResult = Begin_updatePlanTarget(null, null, accessKey, query, dataMap);
      End_updatePlanTarget(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updatePlanTarget(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> query, Dictionary<string, string> dataMap)
    #else
    public void send_updatePlanTarget(string accessKey, Dictionary<string, string> query, Dictionary<string, string> dataMap)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updatePlanTarget", TMessageType.Call, seqid_));
      updatePlanTarget_args args = new updatePlanTarget_args();
      args.AccessKey = accessKey;
      args.Query = query;
      args.DataMap = dataMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_updatePlanTarget()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updatePlanTarget_result result = new updatePlanTarget_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getCurrentOnJobWorkerNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds)
    {
      return send_getCurrentOnJobWorkerNums(callback, state, accessKey, entityIds);
    }

    public Dictionary<string, long> End_getCurrentOnJobWorkerNums(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCurrentOnJobWorkerNums();
    }

    #endif

    /// <summary>
    /// get current on job workers number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    public Dictionary<string, long> getCurrentOnJobWorkerNums(string accessKey, THashSet<string> entityIds)
    {
      #if !SILVERLIGHT
      send_getCurrentOnJobWorkerNums(accessKey, entityIds);
      return recv_getCurrentOnJobWorkerNums();

      #else
      var asyncResult = Begin_getCurrentOnJobWorkerNums(null, null, accessKey, entityIds);
      return End_getCurrentOnJobWorkerNums(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCurrentOnJobWorkerNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds)
    #else
    public void send_getCurrentOnJobWorkerNums(string accessKey, THashSet<string> entityIds)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getCurrentOnJobWorkerNums", TMessageType.Call, seqid_));
      getCurrentOnJobWorkerNums_args args = new getCurrentOnJobWorkerNums_args();
      args.AccessKey = accessKey;
      args.EntityIds = entityIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getCurrentOnJobWorkerNums()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCurrentOnJobWorkerNums_result result = new getCurrentOnJobWorkerNums_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCurrentOnJobWorkerNums failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getOriProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      return send_getOriProductOutputNums(callback, state, accessKey, entityIds, startTime, endTime);
    }

    public Dictionary<string, long> End_getOriProductOutputNums(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getOriProductOutputNums();
    }

    #endif

    /// <summary>
    /// get out put number
    /// date in format of 20130101
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public Dictionary<string, long> getOriProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      #if !SILVERLIGHT
      send_getOriProductOutputNums(accessKey, entityIds, startTime, endTime);
      return recv_getOriProductOutputNums();

      #else
      var asyncResult = Begin_getOriProductOutputNums(null, null, accessKey, entityIds, startTime, endTime);
      return End_getOriProductOutputNums(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getOriProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #else
    public void send_getOriProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getOriProductOutputNums", TMessageType.Call, seqid_));
      getOriProductOutputNums_args args = new getOriProductOutputNums_args();
      args.AccessKey = accessKey;
      args.EntityIds = entityIds;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getOriProductOutputNums()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getOriProductOutputNums_result result = new getOriProductOutputNums_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOriProductOutputNums failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getFTRProductNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      return send_getFTRProductNums(callback, state, accessKey, entityIds, startTime, endTime);
    }

    public Dictionary<string, long> End_getFTRProductNums(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFTRProductNums();
    }

    #endif

    /// <summary>
    /// get product inspect first time right number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public Dictionary<string, long> getFTRProductNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      #if !SILVERLIGHT
      send_getFTRProductNums(accessKey, entityIds, startTime, endTime);
      return recv_getFTRProductNums();

      #else
      var asyncResult = Begin_getFTRProductNums(null, null, accessKey, entityIds, startTime, endTime);
      return End_getFTRProductNums(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFTRProductNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #else
    public void send_getFTRProductNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getFTRProductNums", TMessageType.Call, seqid_));
      getFTRProductNums_args args = new getFTRProductNums_args();
      args.AccessKey = accessKey;
      args.EntityIds = entityIds;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getFTRProductNums()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFTRProductNums_result result = new getFTRProductNums_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFTRProductNums failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getFailProductInspectNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      return send_getFailProductInspectNums(callback, state, accessKey, entityIds, startTime, endTime);
    }

    public Dictionary<string, long> End_getFailProductInspectNums(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFailProductInspectNums();
    }

    #endif

    /// <summary>
    /// get product inspect faild number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public Dictionary<string, long> getFailProductInspectNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      #if !SILVERLIGHT
      send_getFailProductInspectNums(accessKey, entityIds, startTime, endTime);
      return recv_getFailProductInspectNums();

      #else
      var asyncResult = Begin_getFailProductInspectNums(null, null, accessKey, entityIds, startTime, endTime);
      return End_getFailProductInspectNums(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFailProductInspectNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #else
    public void send_getFailProductInspectNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getFailProductInspectNums", TMessageType.Call, seqid_));
      getFailProductInspectNums_args args = new getFailProductInspectNums_args();
      args.AccessKey = accessKey;
      args.EntityIds = entityIds;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getFailProductInspectNums()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFailProductInspectNums_result result = new getFailProductInspectNums_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFailProductInspectNums failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      return send_getProductOutputNums(callback, state, accessKey, entityIds, startTime, endTime);
    }

    public Dictionary<string, long> End_getProductOutputNums(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProductOutputNums();
    }

    #endif

    /// <summary>
    /// get product number
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public Dictionary<string, long> getProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      #if !SILVERLIGHT
      send_getProductOutputNums(accessKey, entityIds, startTime, endTime);
      return recv_getProductOutputNums();

      #else
      var asyncResult = Begin_getProductOutputNums(null, null, accessKey, entityIds, startTime, endTime);
      return End_getProductOutputNums(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #else
    public void send_getProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getProductOutputNums", TMessageType.Call, seqid_));
      getProductOutputNums_args args = new getProductOutputNums_args();
      args.AccessKey = accessKey;
      args.EntityIds = entityIds;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getProductOutputNums()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProductOutputNums_result result = new getProductOutputNums_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductOutputNums failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getProductOutputNumsByPartId(AsyncCallback callback, object state, string accessKey, string entityId, string partId, string startTime, string endTime)
    {
      return send_getProductOutputNumsByPartId(callback, state, accessKey, entityId, partId, startTime, endTime);
    }

    public long End_getProductOutputNumsByPartId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProductOutputNumsByPartId();
    }

    #endif

    /// <summary>
    /// get product number by partId,entityId
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityId"></param>
    /// <param name="partId"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public long getProductOutputNumsByPartId(string accessKey, string entityId, string partId, string startTime, string endTime)
    {
      #if !SILVERLIGHT
      send_getProductOutputNumsByPartId(accessKey, entityId, partId, startTime, endTime);
      return recv_getProductOutputNumsByPartId();

      #else
      var asyncResult = Begin_getProductOutputNumsByPartId(null, null, accessKey, entityId, partId, startTime, endTime);
      return End_getProductOutputNumsByPartId(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProductOutputNumsByPartId(AsyncCallback callback, object state, string accessKey, string entityId, string partId, string startTime, string endTime)
    #else
    public void send_getProductOutputNumsByPartId(string accessKey, string entityId, string partId, string startTime, string endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getProductOutputNumsByPartId", TMessageType.Call, seqid_));
      getProductOutputNumsByPartId_args args = new getProductOutputNumsByPartId_args();
      args.AccessKey = accessKey;
      args.EntityId = entityId;
      args.PartId = partId;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_getProductOutputNumsByPartId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProductOutputNumsByPartId_result result = new getProductOutputNumsByPartId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductOutputNumsByPartId failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getOnJobTotalTimes(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      return send_getOnJobTotalTimes(callback, state, accessKey, entityIds, startTime, endTime);
    }

    public Dictionary<string, long> End_getOnJobTotalTimes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getOnJobTotalTimes();
    }

    #endif

    /// <summary>
    /// get entity workers on job time
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityIds"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public Dictionary<string, long> getOnJobTotalTimes(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    {
      #if !SILVERLIGHT
      send_getOnJobTotalTimes(accessKey, entityIds, startTime, endTime);
      return recv_getOnJobTotalTimes();

      #else
      var asyncResult = Begin_getOnJobTotalTimes(null, null, accessKey, entityIds, startTime, endTime);
      return End_getOnJobTotalTimes(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getOnJobTotalTimes(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #else
    public void send_getOnJobTotalTimes(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getOnJobTotalTimes", TMessageType.Call, seqid_));
      getOnJobTotalTimes_args args = new getOnJobTotalTimes_args();
      args.AccessKey = accessKey;
      args.EntityIds = entityIds;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getOnJobTotalTimes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getOnJobTotalTimes_result result = new getOnJobTotalTimes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOnJobTotalTimes failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getProductOutputNumAndTime(AsyncCallback callback, object state, string accessKey, string entityId, long startTime, long endTime)
    {
      return send_getProductOutputNumAndTime(callback, state, accessKey, entityId, startTime, endTime);
    }

    public THashSet<Dictionary<string, string>> End_getProductOutputNumAndTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProductOutputNumAndTime();
    }

    #endif

    /// <summary>
    /// get entity part num and produce-time
    /// </summary>
    /// <param name="accessKey"></param>
    /// <param name="entityId"></param>
    /// <param name="startTime"></param>
    /// <param name="endTime"></param>
    public THashSet<Dictionary<string, string>> getProductOutputNumAndTime(string accessKey, string entityId, long startTime, long endTime)
    {
      #if !SILVERLIGHT
      send_getProductOutputNumAndTime(accessKey, entityId, startTime, endTime);
      return recv_getProductOutputNumAndTime();

      #else
      var asyncResult = Begin_getProductOutputNumAndTime(null, null, accessKey, entityId, startTime, endTime);
      return End_getProductOutputNumAndTime(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProductOutputNumAndTime(AsyncCallback callback, object state, string accessKey, string entityId, long startTime, long endTime)
    #else
    public void send_getProductOutputNumAndTime(string accessKey, string entityId, long startTime, long endTime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getProductOutputNumAndTime", TMessageType.Call, seqid_));
      getProductOutputNumAndTime_args args = new getProductOutputNumAndTime_args();
      args.AccessKey = accessKey;
      args.EntityId = entityId;
      args.StartTime = startTime;
      args.EndTime = endTime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public THashSet<Dictionary<string, string>> recv_getProductOutputNumAndTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProductOutputNumAndTime_result result = new getProductOutputNumAndTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductOutputNumAndTime failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["addAttendance"] = addAttendance_Process;
      processMap_["addProductInspect"] = addProductInspect_Process;
      processMap_["addProductPack"] = addProductPack_Process;
      processMap_["setProductInspectState"] = setProductInspectState_Process;
      processMap_["addOperatingState"] = addOperatingState_Process;
      processMap_["addPlanTarget"] = addPlanTarget_Process;
      processMap_["getPlanTarget"] = getPlanTarget_Process;
      processMap_["updatePlanTarget"] = updatePlanTarget_Process;
      processMap_["getCurrentOnJobWorkerNums"] = getCurrentOnJobWorkerNums_Process;
      processMap_["getOriProductOutputNums"] = getOriProductOutputNums_Process;
      processMap_["getFTRProductNums"] = getFTRProductNums_Process;
      processMap_["getFailProductInspectNums"] = getFailProductInspectNums_Process;
      processMap_["getProductOutputNums"] = getProductOutputNums_Process;
      processMap_["getProductOutputNumsByPartId"] = getProductOutputNumsByPartId_Process;
      processMap_["getOnJobTotalTimes"] = getOnJobTotalTimes_Process;
      processMap_["getProductOutputNumAndTime"] = getProductOutputNumAndTime_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void addAttendance_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addAttendance_args args = new addAttendance_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addAttendance_result result = new addAttendance_result();
      iface_.addAttendance(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("addAttendance", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addProductInspect_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addProductInspect_args args = new addProductInspect_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addProductInspect_result result = new addProductInspect_result();
      iface_.addProductInspect(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("addProductInspect", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addProductPack_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addProductPack_args args = new addProductPack_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addProductPack_result result = new addProductPack_result();
      iface_.addProductPack(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("addProductPack", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setProductInspectState_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProductInspectState_args args = new setProductInspectState_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProductInspectState_result result = new setProductInspectState_result();
      iface_.setProductInspectState(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("setProductInspectState", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addOperatingState_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addOperatingState_args args = new addOperatingState_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addOperatingState_result result = new addOperatingState_result();
      iface_.addOperatingState(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("addOperatingState", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addPlanTarget_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addPlanTarget_args args = new addPlanTarget_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addPlanTarget_result result = new addPlanTarget_result();
      iface_.addPlanTarget(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("addPlanTarget", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPlanTarget_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPlanTarget_args args = new getPlanTarget_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPlanTarget_result result = new getPlanTarget_result();
      result.Success = iface_.getPlanTarget(args.AccessKey, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("getPlanTarget", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updatePlanTarget_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updatePlanTarget_args args = new updatePlanTarget_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updatePlanTarget_result result = new updatePlanTarget_result();
      iface_.updatePlanTarget(args.AccessKey, args.Query, args.DataMap);
      oprot.WriteMessageBegin(new TMessage("updatePlanTarget", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCurrentOnJobWorkerNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCurrentOnJobWorkerNums_args args = new getCurrentOnJobWorkerNums_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCurrentOnJobWorkerNums_result result = new getCurrentOnJobWorkerNums_result();
      result.Success = iface_.getCurrentOnJobWorkerNums(args.AccessKey, args.EntityIds);
      oprot.WriteMessageBegin(new TMessage("getCurrentOnJobWorkerNums", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getOriProductOutputNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getOriProductOutputNums_args args = new getOriProductOutputNums_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getOriProductOutputNums_result result = new getOriProductOutputNums_result();
      result.Success = iface_.getOriProductOutputNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getOriProductOutputNums", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFTRProductNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFTRProductNums_args args = new getFTRProductNums_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFTRProductNums_result result = new getFTRProductNums_result();
      result.Success = iface_.getFTRProductNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getFTRProductNums", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFailProductInspectNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFailProductInspectNums_args args = new getFailProductInspectNums_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFailProductInspectNums_result result = new getFailProductInspectNums_result();
      result.Success = iface_.getFailProductInspectNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getFailProductInspectNums", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProductOutputNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProductOutputNums_args args = new getProductOutputNums_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProductOutputNums_result result = new getProductOutputNums_result();
      result.Success = iface_.getProductOutputNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getProductOutputNums", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProductOutputNumsByPartId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProductOutputNumsByPartId_args args = new getProductOutputNumsByPartId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProductOutputNumsByPartId_result result = new getProductOutputNumsByPartId_result();
      result.Success = iface_.getProductOutputNumsByPartId(args.AccessKey, args.EntityId, args.PartId, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getProductOutputNumsByPartId", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getOnJobTotalTimes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getOnJobTotalTimes_args args = new getOnJobTotalTimes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getOnJobTotalTimes_result result = new getOnJobTotalTimes_result();
      result.Success = iface_.getOnJobTotalTimes(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getOnJobTotalTimes", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProductOutputNumAndTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProductOutputNumAndTime_args args = new getProductOutputNumAndTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProductOutputNumAndTime_result result = new getProductOutputNumAndTime_result();
      result.Success = iface_.getProductOutputNumAndTime(args.AccessKey, args.EntityId, args.StartTime, args.EndTime);
      oprot.WriteMessageBegin(new TMessage("getProductOutputNumAndTime", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addAttendance_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public addAttendance_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  DataMap[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addAttendance_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter4 in DataMap.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteString(DataMap[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addAttendance_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addAttendance_result : TBase
  {

    public addAttendance_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addAttendance_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addAttendance_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addProductInspect_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public addProductInspect_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  string _key7;
                  string _val8;
                  _key7 = iprot.ReadString();
                  _val8 = iprot.ReadString();
                  DataMap[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addProductInspect_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter9 in DataMap.Keys)
          {
            oprot.WriteString(_iter9);
            oprot.WriteString(DataMap[_iter9]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addProductInspect_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addProductInspect_result : TBase
  {

    public addProductInspect_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addProductInspect_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addProductInspect_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addProductPack_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public addProductPack_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map10 = iprot.ReadMapBegin();
                for( int _i11 = 0; _i11 < _map10.Count; ++_i11)
                {
                  string _key12;
                  string _val13;
                  _key12 = iprot.ReadString();
                  _val13 = iprot.ReadString();
                  DataMap[_key12] = _val13;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addProductPack_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter14 in DataMap.Keys)
          {
            oprot.WriteString(_iter14);
            oprot.WriteString(DataMap[_iter14]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addProductPack_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addProductPack_result : TBase
  {

    public addProductPack_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addProductPack_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addProductPack_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProductInspectState_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public setProductInspectState_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map15 = iprot.ReadMapBegin();
                for( int _i16 = 0; _i16 < _map15.Count; ++_i16)
                {
                  string _key17;
                  string _val18;
                  _key17 = iprot.ReadString();
                  _val18 = iprot.ReadString();
                  DataMap[_key17] = _val18;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("setProductInspectState_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter19 in DataMap.Keys)
          {
            oprot.WriteString(_iter19);
            oprot.WriteString(DataMap[_iter19]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("setProductInspectState_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProductInspectState_result : TBase
  {

    public setProductInspectState_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("setProductInspectState_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("setProductInspectState_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addOperatingState_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public addOperatingState_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map20 = iprot.ReadMapBegin();
                for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                {
                  string _key22;
                  string _val23;
                  _key22 = iprot.ReadString();
                  _val23 = iprot.ReadString();
                  DataMap[_key22] = _val23;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addOperatingState_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter24 in DataMap.Keys)
          {
            oprot.WriteString(_iter24);
            oprot.WriteString(DataMap[_iter24]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addOperatingState_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addOperatingState_result : TBase
  {

    public addOperatingState_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addOperatingState_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addOperatingState_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addPlanTarget_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public addPlanTarget_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map25 = iprot.ReadMapBegin();
                for( int _i26 = 0; _i26 < _map25.Count; ++_i26)
                {
                  string _key27;
                  string _val28;
                  _key27 = iprot.ReadString();
                  _val28 = iprot.ReadString();
                  DataMap[_key27] = _val28;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addPlanTarget_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter29 in DataMap.Keys)
          {
            oprot.WriteString(_iter29);
            oprot.WriteString(DataMap[_iter29]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addPlanTarget_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addPlanTarget_result : TBase
  {

    public addPlanTarget_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addPlanTarget_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addPlanTarget_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPlanTarget_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool dataMap;
    }

    public getPlanTarget_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map30 = iprot.ReadMapBegin();
                for( int _i31 = 0; _i31 < _map30.Count; ++_i31)
                {
                  string _key32;
                  string _val33;
                  _key32 = iprot.ReadString();
                  _val33 = iprot.ReadString();
                  DataMap[_key32] = _val33;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getPlanTarget_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter34 in DataMap.Keys)
          {
            oprot.WriteString(_iter34);
            oprot.WriteString(DataMap[_iter34]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getPlanTarget_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPlanTarget_result : TBase
  {
    private Dictionary<string, string> _success;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPlanTarget_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, string>();
                TMap _map35 = iprot.ReadMapBegin();
                for( int _i36 = 0; _i36 < _map35.Count; ++_i36)
                {
                  string _key37;
                  string _val38;
                  _key37 = iprot.ReadString();
                  _val38 = iprot.ReadString();
                  Success[_key37] = _val38;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getPlanTarget_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
            foreach (string _iter39 in Success.Keys)
            {
              oprot.WriteString(_iter39);
              oprot.WriteString(Success[_iter39]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getPlanTarget_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updatePlanTarget_args : TBase
  {
    private string _accessKey;
    private Dictionary<string, string> _query;
    private Dictionary<string, string> _dataMap;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public Dictionary<string, string> Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    public Dictionary<string, string> DataMap
    {
      get
      {
        return _dataMap;
      }
      set
      {
        __isset.dataMap = true;
        this._dataMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool query;
      public bool dataMap;
    }

    public updatePlanTarget_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Query = new Dictionary<string, string>();
                TMap _map40 = iprot.ReadMapBegin();
                for( int _i41 = 0; _i41 < _map40.Count; ++_i41)
                {
                  string _key42;
                  string _val43;
                  _key42 = iprot.ReadString();
                  _val43 = iprot.ReadString();
                  Query[_key42] = _val43;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                DataMap = new Dictionary<string, string>();
                TMap _map44 = iprot.ReadMapBegin();
                for( int _i45 = 0; _i45 < _map44.Count; ++_i45)
                {
                  string _key46;
                  string _val47;
                  _key46 = iprot.ReadString();
                  _val47 = iprot.ReadString();
                  DataMap[_key46] = _val47;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("updatePlanTarget_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (Query != null && __isset.query) {
        field.Name = "query";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Query.Count));
          foreach (string _iter48 in Query.Keys)
          {
            oprot.WriteString(_iter48);
            oprot.WriteString(Query[_iter48]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DataMap != null && __isset.dataMap) {
        field.Name = "dataMap";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
          foreach (string _iter49 in DataMap.Keys)
          {
            oprot.WriteString(_iter49);
            oprot.WriteString(DataMap[_iter49]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("updatePlanTarget_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",Query: ");
      sb.Append(Query);
      sb.Append(",DataMap: ");
      sb.Append(DataMap);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updatePlanTarget_result : TBase
  {

    public updatePlanTarget_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("updatePlanTarget_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("updatePlanTarget_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCurrentOnJobWorkerNums_args : TBase
  {
    private string _accessKey;
    private THashSet<string> _entityIds;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public THashSet<string> EntityIds
    {
      get
      {
        return _entityIds;
      }
      set
      {
        __isset.entityIds = true;
        this._entityIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityIds;
    }

    public getCurrentOnJobWorkerNums_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                EntityIds = new THashSet<string>();
                TSet _set50 = iprot.ReadSetBegin();
                for( int _i51 = 0; _i51 < _set50.Count; ++_i51)
                {
                  string _elem52 = null;
                  _elem52 = iprot.ReadString();
                  EntityIds.Add(_elem52);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getCurrentOnJobWorkerNums_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityIds != null && __isset.entityIds) {
        field.Name = "entityIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
          foreach (string _iter53 in EntityIds)
          {
            oprot.WriteString(_iter53);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getCurrentOnJobWorkerNums_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityIds: ");
      sb.Append(EntityIds);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCurrentOnJobWorkerNums_result : TBase
  {
    private Dictionary<string, long> _success;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getCurrentOnJobWorkerNums_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, long>();
                TMap _map54 = iprot.ReadMapBegin();
                for( int _i55 = 0; _i55 < _map54.Count; ++_i55)
                {
                  string _key56;
                  long _val57;
                  _key56 = iprot.ReadString();
                  _val57 = iprot.ReadI64();
                  Success[_key56] = _val57;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getCurrentOnJobWorkerNums_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
            foreach (string _iter58 in Success.Keys)
            {
              oprot.WriteString(_iter58);
              oprot.WriteI64(Success[_iter58]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getCurrentOnJobWorkerNums_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOriProductOutputNums_args : TBase
  {
    private string _accessKey;
    private THashSet<string> _entityIds;
    private long _startTime;
    private long _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public THashSet<string> EntityIds
    {
      get
      {
        return _entityIds;
      }
      set
      {
        __isset.entityIds = true;
        this._entityIds = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityIds;
      public bool startTime;
      public bool endTime;
    }

    public getOriProductOutputNums_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                EntityIds = new THashSet<string>();
                TSet _set59 = iprot.ReadSetBegin();
                for( int _i60 = 0; _i60 < _set59.Count; ++_i60)
                {
                  string _elem61 = null;
                  _elem61 = iprot.ReadString();
                  EntityIds.Add(_elem61);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getOriProductOutputNums_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityIds != null && __isset.entityIds) {
        field.Name = "entityIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
          foreach (string _iter62 in EntityIds)
          {
            oprot.WriteString(_iter62);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getOriProductOutputNums_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityIds: ");
      sb.Append(EntityIds);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOriProductOutputNums_result : TBase
  {
    private Dictionary<string, long> _success;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getOriProductOutputNums_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, long>();
                TMap _map63 = iprot.ReadMapBegin();
                for( int _i64 = 0; _i64 < _map63.Count; ++_i64)
                {
                  string _key65;
                  long _val66;
                  _key65 = iprot.ReadString();
                  _val66 = iprot.ReadI64();
                  Success[_key65] = _val66;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getOriProductOutputNums_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
            foreach (string _iter67 in Success.Keys)
            {
              oprot.WriteString(_iter67);
              oprot.WriteI64(Success[_iter67]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getOriProductOutputNums_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFTRProductNums_args : TBase
  {
    private string _accessKey;
    private THashSet<string> _entityIds;
    private long _startTime;
    private long _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public THashSet<string> EntityIds
    {
      get
      {
        return _entityIds;
      }
      set
      {
        __isset.entityIds = true;
        this._entityIds = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityIds;
      public bool startTime;
      public bool endTime;
    }

    public getFTRProductNums_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                EntityIds = new THashSet<string>();
                TSet _set68 = iprot.ReadSetBegin();
                for( int _i69 = 0; _i69 < _set68.Count; ++_i69)
                {
                  string _elem70 = null;
                  _elem70 = iprot.ReadString();
                  EntityIds.Add(_elem70);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getFTRProductNums_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityIds != null && __isset.entityIds) {
        field.Name = "entityIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
          foreach (string _iter71 in EntityIds)
          {
            oprot.WriteString(_iter71);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getFTRProductNums_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityIds: ");
      sb.Append(EntityIds);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFTRProductNums_result : TBase
  {
    private Dictionary<string, long> _success;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getFTRProductNums_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, long>();
                TMap _map72 = iprot.ReadMapBegin();
                for( int _i73 = 0; _i73 < _map72.Count; ++_i73)
                {
                  string _key74;
                  long _val75;
                  _key74 = iprot.ReadString();
                  _val75 = iprot.ReadI64();
                  Success[_key74] = _val75;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getFTRProductNums_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
            foreach (string _iter76 in Success.Keys)
            {
              oprot.WriteString(_iter76);
              oprot.WriteI64(Success[_iter76]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getFTRProductNums_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFailProductInspectNums_args : TBase
  {
    private string _accessKey;
    private THashSet<string> _entityIds;
    private long _startTime;
    private long _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public THashSet<string> EntityIds
    {
      get
      {
        return _entityIds;
      }
      set
      {
        __isset.entityIds = true;
        this._entityIds = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityIds;
      public bool startTime;
      public bool endTime;
    }

    public getFailProductInspectNums_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                EntityIds = new THashSet<string>();
                TSet _set77 = iprot.ReadSetBegin();
                for( int _i78 = 0; _i78 < _set77.Count; ++_i78)
                {
                  string _elem79 = null;
                  _elem79 = iprot.ReadString();
                  EntityIds.Add(_elem79);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getFailProductInspectNums_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityIds != null && __isset.entityIds) {
        field.Name = "entityIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
          foreach (string _iter80 in EntityIds)
          {
            oprot.WriteString(_iter80);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getFailProductInspectNums_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityIds: ");
      sb.Append(EntityIds);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFailProductInspectNums_result : TBase
  {
    private Dictionary<string, long> _success;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getFailProductInspectNums_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, long>();
                TMap _map81 = iprot.ReadMapBegin();
                for( int _i82 = 0; _i82 < _map81.Count; ++_i82)
                {
                  string _key83;
                  long _val84;
                  _key83 = iprot.ReadString();
                  _val84 = iprot.ReadI64();
                  Success[_key83] = _val84;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getFailProductInspectNums_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
            foreach (string _iter85 in Success.Keys)
            {
              oprot.WriteString(_iter85);
              oprot.WriteI64(Success[_iter85]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getFailProductInspectNums_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProductOutputNums_args : TBase
  {
    private string _accessKey;
    private THashSet<string> _entityIds;
    private long _startTime;
    private long _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public THashSet<string> EntityIds
    {
      get
      {
        return _entityIds;
      }
      set
      {
        __isset.entityIds = true;
        this._entityIds = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityIds;
      public bool startTime;
      public bool endTime;
    }

    public getProductOutputNums_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                EntityIds = new THashSet<string>();
                TSet _set86 = iprot.ReadSetBegin();
                for( int _i87 = 0; _i87 < _set86.Count; ++_i87)
                {
                  string _elem88 = null;
                  _elem88 = iprot.ReadString();
                  EntityIds.Add(_elem88);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getProductOutputNums_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityIds != null && __isset.entityIds) {
        field.Name = "entityIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
          foreach (string _iter89 in EntityIds)
          {
            oprot.WriteString(_iter89);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getProductOutputNums_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityIds: ");
      sb.Append(EntityIds);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProductOutputNums_result : TBase
  {
    private Dictionary<string, long> _success;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getProductOutputNums_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, long>();
                TMap _map90 = iprot.ReadMapBegin();
                for( int _i91 = 0; _i91 < _map90.Count; ++_i91)
                {
                  string _key92;
                  long _val93;
                  _key92 = iprot.ReadString();
                  _val93 = iprot.ReadI64();
                  Success[_key92] = _val93;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getProductOutputNums_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
            foreach (string _iter94 in Success.Keys)
            {
              oprot.WriteString(_iter94);
              oprot.WriteI64(Success[_iter94]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getProductOutputNums_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProductOutputNumsByPartId_args : TBase
  {
    private string _accessKey;
    private string _entityId;
    private string _partId;
    private string _startTime;
    private string _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public string EntityId
    {
      get
      {
        return _entityId;
      }
      set
      {
        __isset.entityId = true;
        this._entityId = value;
      }
    }

    public string PartId
    {
      get
      {
        return _partId;
      }
      set
      {
        __isset.partId = true;
        this._partId = value;
      }
    }

    public string StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public string EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityId;
      public bool partId;
      public bool startTime;
      public bool endTime;
    }

    public getProductOutputNumsByPartId_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              EntityId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              PartId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              StartTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              EndTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getProductOutputNumsByPartId_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityId != null && __isset.entityId) {
        field.Name = "entityId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EntityId);
        oprot.WriteFieldEnd();
      }
      if (PartId != null && __isset.partId) {
        field.Name = "partId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PartId);
        oprot.WriteFieldEnd();
      }
      if (StartTime != null && __isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StartTime);
        oprot.WriteFieldEnd();
      }
      if (EndTime != null && __isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumsByPartId_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityId: ");
      sb.Append(EntityId);
      sb.Append(",PartId: ");
      sb.Append(PartId);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProductOutputNumsByPartId_result : TBase
  {
    private long _success;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getProductOutputNumsByPartId_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I64) {
              Success = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getProductOutputNumsByPartId_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I64;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumsByPartId_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOnJobTotalTimes_args : TBase
  {
    private string _accessKey;
    private THashSet<string> _entityIds;
    private long _startTime;
    private long _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public THashSet<string> EntityIds
    {
      get
      {
        return _entityIds;
      }
      set
      {
        __isset.entityIds = true;
        this._entityIds = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityIds;
      public bool startTime;
      public bool endTime;
    }

    public getOnJobTotalTimes_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                EntityIds = new THashSet<string>();
                TSet _set95 = iprot.ReadSetBegin();
                for( int _i96 = 0; _i96 < _set95.Count; ++_i96)
                {
                  string _elem97 = null;
                  _elem97 = iprot.ReadString();
                  EntityIds.Add(_elem97);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getOnJobTotalTimes_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityIds != null && __isset.entityIds) {
        field.Name = "entityIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
          foreach (string _iter98 in EntityIds)
          {
            oprot.WriteString(_iter98);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getOnJobTotalTimes_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityIds: ");
      sb.Append(EntityIds);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOnJobTotalTimes_result : TBase
  {
    private Dictionary<string, long> _success;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getOnJobTotalTimes_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<string, long>();
                TMap _map99 = iprot.ReadMapBegin();
                for( int _i100 = 0; _i100 < _map99.Count; ++_i100)
                {
                  string _key101;
                  long _val102;
                  _key101 = iprot.ReadString();
                  _val102 = iprot.ReadI64();
                  Success[_key101] = _val102;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getOnJobTotalTimes_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
            foreach (string _iter103 in Success.Keys)
            {
              oprot.WriteString(_iter103);
              oprot.WriteI64(Success[_iter103]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getOnJobTotalTimes_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProductOutputNumAndTime_args : TBase
  {
    private string _accessKey;
    private string _entityId;
    private long _startTime;
    private long _endTime;

    public string AccessKey
    {
      get
      {
        return _accessKey;
      }
      set
      {
        __isset.accessKey = true;
        this._accessKey = value;
      }
    }

    public string EntityId
    {
      get
      {
        return _entityId;
      }
      set
      {
        __isset.entityId = true;
        this._entityId = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accessKey;
      public bool entityId;
      public bool startTime;
      public bool endTime;
    }

    public getProductOutputNumAndTime_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              EntityId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getProductOutputNumAndTime_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKey != null && __isset.accessKey) {
        field.Name = "accessKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKey);
        oprot.WriteFieldEnd();
      }
      if (EntityId != null && __isset.entityId) {
        field.Name = "entityId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EntityId);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumAndTime_args(");
      sb.Append("AccessKey: ");
      sb.Append(AccessKey);
      sb.Append(",EntityId: ");
      sb.Append(EntityId);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProductOutputNumAndTime_result : TBase
  {
    private THashSet<Dictionary<string, string>> _success;

    public THashSet<Dictionary<string, string>> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getProductOutputNumAndTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Set) {
              {
                Success = new THashSet<Dictionary<string, string>>();
                TSet _set104 = iprot.ReadSetBegin();
                for( int _i105 = 0; _i105 < _set104.Count; ++_i105)
                {
                  Dictionary<string, string> _elem106 = new Dictionary<string, string>();
                  {
                    _elem106 = new Dictionary<string, string>();
                    TMap _map107 = iprot.ReadMapBegin();
                    for( int _i108 = 0; _i108 < _map107.Count; ++_i108)
                    {
                      string _key109;
                      string _val110;
                      _key109 = iprot.ReadString();
                      _val110 = iprot.ReadString();
                      _elem106[_key109] = _val110;
                    }
                    iprot.ReadMapEnd();
                  }
                  Success.Add(_elem106);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getProductOutputNumAndTime_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Set;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Map, Success.Count));
            foreach (Dictionary<string, string> _iter111 in Success)
            {
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter111.Count));
                foreach (string _iter112 in _iter111.Keys)
                {
                  oprot.WriteString(_iter112);
                  oprot.WriteString(_iter111[_iter112]);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getProductOutputNumAndTime_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
